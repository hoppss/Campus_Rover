/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-05-27 17:32:57.223575
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKsin(j[0]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=((0.048)*x3);
x9=((0.0099)*x3);
x10=((0.048)*x4);
x11=((0.1415)*x1);
x12=((0.1415)*x4);
x13=((0.1415)*x3);
x14=((0.0099)*x4);
x15=(x1*x5);
x16=(x0*x2);
x17=(x2*x5);
x18=(x0*x1);
IkReal x19=((1.0)*x16);
eetrans[0]=((((0.174)*x16))+((x14*x18))+(((-1.0)*x19*x9))+(((0.043)*x18))+((x6*((((x18*x8))+((x10*x16))))))+((x7*(((((-1.0)*x19*x8))+((x10*x18))))))+((x0*x11*x3))+((x12*x16)));
IkReal x20=((1.0)*x17);
eetrans[1]=((((-1.0)*x20*x9))+(((0.174)*x17))+((x14*x15))+(((0.043)*x15))+((x7*(((((-1.0)*x20*x8))+((x10*x15))))))+((x12*x17))+((x11*x3*x5))+((x6*((((x10*x17))+((x15*x8)))))));
IkReal x21=((1.0)*x1);
IkReal x22=((1.0)*x2);
eetrans[2]=((0.0865)+(((-0.043)*x2))+(((0.174)*x1))+(((-1.0)*x21*x9))+(((-1.0)*x14*x22))+((x11*x4))+(((-1.0)*x13*x22))+((x7*(((((-1.0)*x10*x22))+(((-1.0)*x21*x8))))))+((x6*(((((-1.0)*x22*x8))+((x1*x10)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {3}; return freeparams; }
IKFAST_API int GetNumJoints() { return 4; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1;  _ij3[0] = -1; _ij3[1] = -1; _nj3 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j3=pfree[0]; cj3=cos(pfree[0]); sj3=sin(pfree[0]);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=px;
new_py=py;
new_pz=((-0.0865)+pz);
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
j2eval[0]=((21.1703072390572)+sj3+(((2.42424242424242)*(sj3*sj3)))+(((2.42424242424242)*(cj3*cj3)))+(((14.2929292929293)*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
if((pz*pz) < -0.00001)
continue;
j1eval[0]=((35.8468966578698)*(IKsqrt(pz*pz)));
j1eval[1]=0.434;
j1eval[2]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
px=0;
py=0;
pp=pz*pz;
j2eval[0]=((21.1703072390572)+sj3+(((2.42424242424242)*(sj3*sj3)))+(((2.42424242424242)*(cj3*cj3)))+(((14.2929292929293)*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
px=0;
py=0;
pp=0;
pz=0;
IkReal x23=((14.2929292929293)*cj3);
j2eval[0]=((-23.5945496632997)+(((-1.0)*sj3))+(((-1.0)*x23)));
j2eval[1]=((21.1703072390572)+sj3+(((2.42424242424242)*(sj3*sj3)))+x23+(((2.42424242424242)*(cj3*cj3))));
j2eval[2]=IKsign(((-22.42426)+(((-0.9504)*sj3))+(((-13.584)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
px=0;
py=0;
pp=0;
pz=0;
IkReal x24=cj3*cj3;
IkReal x25=(cj3*sj3);
j2eval[0]=((16.9494482364536)+(((-1.0)*x24))+(((4.23719780944084)*sj3))+(((3.94407043566641)*cj3))+(((-5.74215364863935)*x25)));
j2eval[1]=IKsign(((9.63046576378798)+(((-3.26262031378092)*x25))+(((2.40752311632509)*sj3))+(((-0.568187567491166)*x24))+(((2.24097178685512)*cj3))));
j2eval[2]=((IKabs(((-10.6678227273498)+(((-0.50900136254417)*sj3)))))+(IKabs(((6.80196871067138)+(((2.05967993215548)*sj3))+(((-12.336)*cj3))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
px=0;
py=0;
pp=0;
pz=0;
IkReal x26=cj3*cj3;
IkReal x27=(cj3*sj3);
j2eval[0]=((-354.539762919765)+(((-1.0)*sj3))+(((-111.382517243953)*cj3))+(((-5.31447273635523)*x27))+(((30.5165190136566)*x26)));
j2eval[1]=IKsign(((-37.9049993227421)+(((-0.568187567491166)*x27))+(((3.26262031378092)*x26))+(((-11.90826723053)*cj3))+(((-0.106913252862191)*sj3))));
j2eval[2]=((IKabs(((34.3579627742756)+(((12.336)*cj3))+(((2.92276403109541)*sj3)))))+(IKabs(((8.12352272734982)+(((-11.8269986374558)*sj3))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x28=IKPowWithIntegerCheck(IKsign(((-37.9049993227421)+(((3.26262031378092)*(cj3*cj3)))+(((-0.568187567491166)*cj3*sj3))+(((-11.90826723053)*cj3))+(((-0.106913252862191)*sj3)))),-1);
if(!x28.valid){
continue;
}
CheckValue<IkReal> x29 = IKatan2WithCheck(IkReal(((8.12352272734982)+(((-11.8269986374558)*sj3)))),IkReal(((34.3579627742756)+(((12.336)*cj3))+(((2.92276403109541)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x29.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x28.value)))+(x29.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x30=IKsin(j2);
IkReal x31=IKcos(j2);
IkReal x32=((0.048)*cj3);
IkReal x33=(sj3*x31);
IkReal x34=(sj3*x30);
evalcond[0]=((-0.174)+(((0.0099)*x30))+(((-1.0)*x31*x32))+(((0.048)*x34))+(((-0.1415)*x31)));
evalcond[1]=((0.043)+(((0.0099)*x31))+(((0.1415)*x30))+((x30*x32))+(((0.048)*x33)));
evalcond[2]=((0.06425)+(((0.0620222251590106)*x31))+(((0.00295931024734982)*x33))+(((-0.0169928141342756)*x34))+(((0.0116717280565371)*x30)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x35=((0.048)*cj2);
IkReal x36=((0.048)*sj2);
j1eval[0]=((IKabs(((-0.174)+(((-0.1415)*cj2))+(((0.0099)*sj2))+(((-1.0)*cj3*x35))+((sj3*x36)))))+(IKabs(((0.043)+(((0.1415)*sj2))+((cj3*x36))+((sj3*x35))+(((0.0099)*cj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x37=((0.048)*sj3);
IkReal x38=((0.048)*cj3);
j1eval[0]=((IKabs(((0.174)+((cj2*x38))+(((-1.0)*sj2*x37))+(((0.1415)*cj2))+(((-0.0099)*sj2)))))+(IKabs(((0.043)+(((0.1415)*sj2))+((cj2*x37))+((sj2*x38))+(((0.0099)*cj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x39=((0.048)*sj3);
IkReal x40=((0.048)*cj3);
CheckValue<IkReal> x42 = IKatan2WithCheck(IkReal(((0.043)+(((0.1415)*sj2))+((cj2*x39))+((sj2*x40))+(((0.0099)*cj2)))),IkReal(((0.174)+((cj2*x40))+(((-1.0)*sj2*x39))+(((0.1415)*cj2))+(((-0.0099)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x42.valid){
continue;
}
IkReal x41=x42.value;
j1array[0]=((-1.0)*x41);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x41)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x43=IKsin(j1);
IkReal x44=IKcos(j1);
IkReal x45=((0.048)*sj3);
IkReal x46=((0.048)*cj3);
IkReal x47=(sj2*x43);
IkReal x48=(cj2*x44);
IkReal x49=(cj2*x43);
IkReal x50=(sj2*x44);
evalcond[0]=((((0.043)*x43))+(((0.0099)*x49))+(((0.1415)*x47))+(((-0.174)*x44))+((x46*x47))+((x45*x50))+((x45*x49))+(((0.0099)*x50))+(((-0.1415)*x48))+(((-1.0)*x46*x48)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x51=((0.048)*cj2);
IkReal x52=((0.048)*sj2);
CheckValue<IkReal> x54 = IKatan2WithCheck(IkReal(((-0.174)+((sj3*x52))+(((-0.1415)*cj2))+(((0.0099)*sj2))+(((-1.0)*cj3*x51)))),IkReal(((0.043)+((sj3*x51))+(((0.1415)*sj2))+(((0.0099)*cj2))+((cj3*x52)))),IKFAST_ATAN2_MAGTHRESH);
if(!x54.valid){
continue;
}
IkReal x53=x54.value;
j1array[0]=((-1.0)*x53);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x53)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x55=IKcos(j1);
IkReal x56=IKsin(j1);
IkReal x57=((0.048)*sj2);
IkReal x58=((0.048)*cj2);
evalcond[0]=(((cj3*x56*x58))+((cj3*x55*x57))+(((0.0099)*cj2*x55))+(((0.174)*x56))+(((0.043)*x55))+(((0.1415)*cj2*x56))+(((-0.0099)*sj2*x56))+(((0.1415)*sj2*x55))+((sj3*x55*x58))+(((-1.0)*sj3*x56*x57)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x59=IKPowWithIntegerCheck(IKsign(((9.63046576378798)+(((-0.568187567491166)*(cj3*cj3)))+(((2.40752311632509)*sj3))+(((2.24097178685512)*cj3))+(((-3.26262031378092)*cj3*sj3)))),-1);
if(!x59.valid){
continue;
}
CheckValue<IkReal> x60 = IKatan2WithCheck(IkReal(((6.80196871067138)+(((2.05967993215548)*sj3))+(((-12.336)*cj3)))),IkReal(((-10.6678227273498)+(((-0.50900136254417)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x60.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x59.value)))+(x60.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x61=IKsin(j2);
IkReal x62=IKcos(j2);
IkReal x63=((0.048)*cj3);
IkReal x64=(sj3*x62);
IkReal x65=(sj3*x61);
evalcond[0]=((-0.174)+(((0.048)*x65))+(((0.0099)*x61))+(((-0.1415)*x62))+(((-1.0)*x62*x63)));
evalcond[1]=((0.043)+(((0.048)*x64))+((x61*x63))+(((0.0099)*x62))+(((0.1415)*x61)));
evalcond[2]=((0.06425)+(((-0.0169928141342756)*x65))+(((0.0116717280565371)*x61))+(((0.0620222251590106)*x62))+(((0.00295931024734982)*x64)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x66=((0.048)*cj2);
IkReal x67=((0.048)*sj2);
j1eval[0]=((IKabs(((-0.174)+((sj3*x67))+(((-0.1415)*cj2))+(((0.0099)*sj2))+(((-1.0)*cj3*x66)))))+(IKabs(((0.043)+(((0.1415)*sj2))+((sj3*x66))+(((0.0099)*cj2))+((cj3*x67))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x68=((0.048)*sj3);
IkReal x69=((0.048)*cj3);
j1eval[0]=((IKabs(((0.174)+(((0.1415)*cj2))+(((-1.0)*sj2*x68))+(((-0.0099)*sj2))+((cj2*x69)))))+(IKabs(((0.043)+((sj2*x69))+(((0.1415)*sj2))+(((0.0099)*cj2))+((cj2*x68))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x70=((0.048)*sj3);
IkReal x71=((0.048)*cj3);
CheckValue<IkReal> x73 = IKatan2WithCheck(IkReal(((0.043)+(((0.1415)*sj2))+((sj2*x71))+((cj2*x70))+(((0.0099)*cj2)))),IkReal(((0.174)+(((-1.0)*sj2*x70))+((cj2*x71))+(((0.1415)*cj2))+(((-0.0099)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x73.valid){
continue;
}
IkReal x72=x73.value;
j1array[0]=((-1.0)*x72);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x72)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x74=IKsin(j1);
IkReal x75=IKcos(j1);
IkReal x76=((0.048)*sj3);
IkReal x77=((0.048)*cj3);
IkReal x78=(sj2*x74);
IkReal x79=(cj2*x75);
IkReal x80=(cj2*x74);
IkReal x81=(sj2*x75);
evalcond[0]=((((0.0099)*x80))+(((0.0099)*x81))+(((-0.1415)*x79))+(((0.043)*x74))+((x76*x80))+((x76*x81))+(((0.1415)*x78))+(((-0.174)*x75))+(((-1.0)*x77*x79))+((x77*x78)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x82=((0.048)*cj2);
IkReal x83=((0.048)*sj2);
CheckValue<IkReal> x85 = IKatan2WithCheck(IkReal(((-0.174)+(((-0.1415)*cj2))+(((0.0099)*sj2))+(((-1.0)*cj3*x82))+((sj3*x83)))),IkReal(((0.043)+(((0.1415)*sj2))+((cj3*x83))+(((0.0099)*cj2))+((sj3*x82)))),IKFAST_ATAN2_MAGTHRESH);
if(!x85.valid){
continue;
}
IkReal x84=x85.value;
j1array[0]=((-1.0)*x84);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x84)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x86=IKcos(j1);
IkReal x87=IKsin(j1);
IkReal x88=((0.048)*sj2);
IkReal x89=((0.048)*cj2);
evalcond[0]=(((cj3*x87*x89))+(((0.1415)*sj2*x86))+((sj3*x86*x89))+(((-0.0099)*sj2*x87))+(((0.0099)*cj2*x86))+(((0.1415)*cj2*x87))+((cj3*x86*x88))+(((0.174)*x87))+(((-1.0)*sj3*x87*x88))+(((0.043)*x86)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x90 = IKatan2WithCheck(IkReal(((4.3619)+(((2.064)*cj3))+(((-8.352)*sj3)))),IkReal(((25.0467)+(((8.352)*cj3))+(((2.064)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x90.valid){
continue;
}
CheckValue<IkReal> x91=IKPowWithIntegerCheck(IKsign(((-22.42426)+(((-0.9504)*sj3))+(((-13.584)*cj3)))),-1);
if(!x91.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x90.value)+(((1.5707963267949)*(x91.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x92=IKsin(j2);
IkReal x93=IKcos(j2);
IkReal x94=((0.048)*cj3);
IkReal x95=(sj3*x93);
IkReal x96=(sj3*x92);
evalcond[0]=((-0.174)+(((0.0099)*x92))+(((-0.1415)*x93))+(((0.048)*x96))+(((-1.0)*x93*x94)));
evalcond[1]=((0.043)+(((0.0099)*x93))+((x92*x94))+(((0.048)*x95))+(((0.1415)*x92)));
evalcond[2]=((0.06425)+(((-0.0169928141342756)*x96))+(((0.0620222251590106)*x93))+(((0.00295931024734982)*x95))+(((0.0116717280565371)*x92)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x97=((0.048)*cj2);
IkReal x98=((0.048)*sj2);
j1eval[0]=((IKabs(((0.043)+((sj3*x97))+(((0.1415)*sj2))+((cj3*x98))+(((0.0099)*cj2)))))+(IKabs(((-0.174)+((sj3*x98))+(((-0.1415)*cj2))+(((0.0099)*sj2))+(((-1.0)*cj3*x97))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x99=((0.048)*sj3);
IkReal x100=((0.048)*cj3);
j1eval[0]=((IKabs(((0.174)+((cj2*x100))+(((-1.0)*sj2*x99))+(((0.1415)*cj2))+(((-0.0099)*sj2)))))+(IKabs(((0.043)+(((0.1415)*sj2))+((sj2*x100))+((cj2*x99))+(((0.0099)*cj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x101=((0.048)*sj3);
IkReal x102=((0.048)*cj3);
CheckValue<IkReal> x104 = IKatan2WithCheck(IkReal(((0.043)+((cj2*x101))+(((0.1415)*sj2))+((sj2*x102))+(((0.0099)*cj2)))),IkReal(((0.174)+((cj2*x102))+(((-1.0)*sj2*x101))+(((0.1415)*cj2))+(((-0.0099)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x104.valid){
continue;
}
IkReal x103=x104.value;
j1array[0]=((-1.0)*x103);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x103)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x105=IKsin(j1);
IkReal x106=IKcos(j1);
IkReal x107=((0.048)*sj3);
IkReal x108=((0.048)*cj3);
IkReal x109=(sj2*x105);
IkReal x110=(cj2*x106);
IkReal x111=(cj2*x105);
IkReal x112=(sj2*x106);
evalcond[0]=((((0.0099)*x111))+(((0.0099)*x112))+(((-1.0)*x108*x110))+((x108*x109))+(((-0.174)*x106))+(((0.043)*x105))+(((0.1415)*x109))+(((-0.1415)*x110))+((x107*x111))+((x107*x112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x113=((0.048)*cj2);
IkReal x114=((0.048)*sj2);
CheckValue<IkReal> x116 = IKatan2WithCheck(IkReal(((-0.174)+((sj3*x114))+(((-0.1415)*cj2))+(((-1.0)*cj3*x113))+(((0.0099)*sj2)))),IkReal(((0.043)+((cj3*x114))+(((0.1415)*sj2))+((sj3*x113))+(((0.0099)*cj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x116.valid){
continue;
}
IkReal x115=x116.value;
j1array[0]=((-1.0)*x115);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x115)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x117=IKcos(j1);
IkReal x118=IKsin(j1);
IkReal x119=((0.048)*sj2);
IkReal x120=((0.048)*cj2);
evalcond[0]=(((cj3*x118*x120))+(((0.1415)*cj2*x118))+((cj3*x117*x119))+(((0.1415)*sj2*x117))+(((-0.0099)*sj2*x118))+((sj3*x117*x120))+(((-1.0)*sj3*x118*x119))+(((0.043)*x117))+(((0.0099)*cj2*x117))+(((0.174)*x118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x121=((0.0087238)+(((0.004128)*cj3))+(((-0.016704)*sj3)));
IkReal x122=((0.0500934)+(((0.016704)*cj3))+(((0.004128)*sj3)));
CheckValue<IkReal> x125 = IKatan2WithCheck(IkReal(x122),IkReal(x121),IKFAST_ATAN2_MAGTHRESH);
if(!x125.valid){
continue;
}
IkReal x123=((1.0)*(x125.value));
if((((x122*x122)+(x121*x121))) < -0.00001)
continue;
CheckValue<IkReal> x126=IKPowWithIntegerCheck(IKabs(IKsqrt(((x122*x122)+(x121*x121)))),-1);
if(!x126.valid){
continue;
}
if( (((x126.value)*(((0.05454926)+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((0.0009504)*sj3)))))) < -1-IKFAST_SINCOS_THRESH || (((x126.value)*(((0.05454926)+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((0.0009504)*sj3)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x124=IKasin(((x126.value)*(((0.05454926)+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((0.0009504)*sj3))))));
j2array[0]=((((-1.0)*x123))+(((-1.0)*x124)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x123))+x124);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x127=((0.048)*sj3);
IkReal x128=((0.048)*cj3);
j1eval[0]=pz;
j1eval[1]=((IKabs(((-0.043)+(((-1.0)*sj2*x128))+(((-0.0099)*cj2))+(((-0.1415)*sj2))+(((-1.0)*cj2*x127)))))+(IKabs(((0.174)+((cj2*x128))+(((-1.0)*sj2*x127))+(((0.1415)*cj2))+(((-0.0099)*sj2))))));
j1eval[2]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x129=(cj2*pz);
IkReal x130=(pz*sj2);
j1eval[0]=((((4.84848484848485)*cj3*x129))+(((14.2929292929293)*x129))+(((-4.84848484848485)*sj3*x130))+(((-1.0)*x130))+(((17.5757575757576)*pz)));
j1eval[1]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x131=((0.048)*cj2);
IkReal x132=((0.048)*sj2);
j1eval[0]=((IKabs(((0.043)+(((0.1415)*sj2))+((cj3*x132))+((sj3*x131))+(((0.0099)*cj2)))))+(IKabs(((-0.174)+(((-0.1415)*cj2))+((sj3*x132))+(((0.0099)*sj2))+(((-1.0)*cj3*x131))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x133=((0.048)*sj3);
IkReal x134=((0.048)*cj3);
j1eval[0]=((IKabs(((0.043)+(((0.1415)*sj2))+((cj2*x133))+((sj2*x134))+(((0.0099)*cj2)))))+(IKabs(((0.174)+(((-1.0)*sj2*x133))+((cj2*x134))+(((0.1415)*cj2))+(((-0.0099)*sj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x135=((0.048)*sj3);
IkReal x136=((0.048)*cj3);
CheckValue<IkReal> x138 = IKatan2WithCheck(IkReal(((0.043)+(((0.1415)*sj2))+((cj2*x135))+((sj2*x136))+(((0.0099)*cj2)))),IkReal(((0.174)+(((-1.0)*sj2*x135))+((cj2*x136))+(((0.1415)*cj2))+(((-0.0099)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x138.valid){
continue;
}
IkReal x137=x138.value;
j1array[0]=((-1.0)*x137);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x137)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x139=IKsin(j1);
IkReal x140=IKcos(j1);
IkReal x141=((0.048)*sj3);
IkReal x142=((0.048)*cj3);
IkReal x143=(sj2*x139);
IkReal x144=(cj2*x140);
IkReal x145=(cj2*x139);
IkReal x146=(sj2*x140);
evalcond[0]=(((x142*x143))+(((-1.0)*x142*x144))+(((0.0099)*x146))+(((0.0099)*x145))+(((0.1415)*x143))+(((-0.1415)*x144))+((x141*x146))+((x141*x145))+(((-0.174)*x140))+(((0.043)*x139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x147=((0.048)*cj2);
IkReal x148=((0.048)*sj2);
CheckValue<IkReal> x150 = IKatan2WithCheck(IkReal(((-0.174)+(((-0.1415)*cj2))+(((0.0099)*sj2))+(((-1.0)*cj3*x147))+((sj3*x148)))),IkReal(((0.043)+(((0.1415)*sj2))+((cj3*x148))+(((0.0099)*cj2))+((sj3*x147)))),IKFAST_ATAN2_MAGTHRESH);
if(!x150.valid){
continue;
}
IkReal x149=x150.value;
j1array[0]=((-1.0)*x149);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x149)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x151=IKcos(j1);
IkReal x152=IKsin(j1);
IkReal x153=((0.048)*sj2);
IkReal x154=((0.048)*cj2);
evalcond[0]=((((0.043)*x151))+((cj3*x152*x154))+(((0.174)*x152))+(((0.0099)*cj2*x151))+(((-1.0)*sj3*x152*x153))+((cj3*x151*x153))+((sj3*x151*x154))+(((0.1415)*sj2*x151))+(((-0.0099)*sj2*x152))+(((0.1415)*cj2*x152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x155=cj2*cj2;
IkReal x156=(sj2*sj3);
IkReal x157=((0.048)*pz);
IkReal x158=(cj2*sj2);
IkReal x159=((0.1415)*cj2);
IkReal x160=((0.0099)*sj2);
IkReal x161=(cj2*cj3);
IkReal x162=(cj3*x155);
CheckValue<IkReal> x163=IKPowWithIntegerCheck(((((0.174)*pz))+((x157*x161))+(((-1.0)*pz*x160))+(((-1.0)*x156*x157))+((pz*x159))),-1);
if(!x163.valid){
continue;
}
CheckValue<IkReal> x164=IKPowWithIntegerCheck(pz,-1);
if(!x164.valid){
continue;
}
if( IKabs(((x163.value)*(((-0.00608115)+(((0.002304)*cj3*sj3))+(((-0.0028017)*x155))+(((-0.013584)*sj3*x155))+(((-0.008352)*cj3*sj2))+(((-0.008352)*cj2*sj3))+(((-0.004608)*sj3*x162))+(((-0.0078071)*cj2))+(((-0.004608)*x158*(cj3*cj3)))+(((-0.01762024)*x158))+(((-0.002064)*x161))+(((-0.0241953)*sj2))+(((0.002064)*x156))+(((-0.0009504)*x162))+(((-0.013584)*cj3*x158))+(((0.0009504)*cj2*x156))+(((0.006792)*sj3))+(((0.0004752)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x164.value)*(((0.174)+(((-0.048)*x156))+(((-1.0)*x160))+(((0.048)*x161))+x159)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x163.value)*(((-0.00608115)+(((0.002304)*cj3*sj3))+(((-0.0028017)*x155))+(((-0.013584)*sj3*x155))+(((-0.008352)*cj3*sj2))+(((-0.008352)*cj2*sj3))+(((-0.004608)*sj3*x162))+(((-0.0078071)*cj2))+(((-0.004608)*x158*(cj3*cj3)))+(((-0.01762024)*x158))+(((-0.002064)*x161))+(((-0.0241953)*sj2))+(((0.002064)*x156))+(((-0.0009504)*x162))+(((-0.013584)*cj3*x158))+(((0.0009504)*cj2*x156))+(((0.006792)*sj3))+(((0.0004752)*cj3))))))+IKsqr(((x164.value)*(((0.174)+(((-0.048)*x156))+(((-1.0)*x160))+(((0.048)*x161))+x159))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x163.value)*(((-0.00608115)+(((0.002304)*cj3*sj3))+(((-0.0028017)*x155))+(((-0.013584)*sj3*x155))+(((-0.008352)*cj3*sj2))+(((-0.008352)*cj2*sj3))+(((-0.004608)*sj3*x162))+(((-0.0078071)*cj2))+(((-0.004608)*x158*(cj3*cj3)))+(((-0.01762024)*x158))+(((-0.002064)*x161))+(((-0.0241953)*sj2))+(((0.002064)*x156))+(((-0.0009504)*x162))+(((-0.013584)*cj3*x158))+(((0.0009504)*cj2*x156))+(((0.006792)*sj3))+(((0.0004752)*cj3))))), ((x164.value)*(((0.174)+(((-0.048)*x156))+(((-1.0)*x160))+(((0.048)*x161))+x159))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x165=IKcos(j1);
IkReal x166=IKsin(j1);
IkReal x167=((0.048)*sj3);
IkReal x168=((0.1415)*sj2);
IkReal x169=((0.1415)*cj2);
IkReal x170=((0.048)*cj3);
IkReal x171=(sj2*x166);
IkReal x172=(sj2*x170);
IkReal x173=((0.0099)*x165);
IkReal x174=(cj2*x166);
IkReal x175=(pz*x165);
IkReal x176=(pz*x166);
IkReal x177=(cj2*x170);
evalcond[0]=((-0.174)+(((-1.0)*x169))+(((-1.0)*x177))+(((0.0099)*sj2))+x175+((sj2*x167)));
evalcond[1]=((0.043)+((cj2*x167))+x172+x176+x168+(((0.0099)*cj2)));
evalcond[2]=((-0.00970074)+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((0.348)*x175))+(((-0.086)*x176))+(((0.0009504)*sj3)));
evalcond[3]=((((0.043)*x165))+(((-0.0099)*x171))+(((0.174)*x166))+((cj2*x173))+((x166*x169))+((x165*x172))+((x170*x174))+((x165*x168))+((cj2*x165*x167))+(((-1.0)*x167*x171)));
evalcond[4]=(((sj2*x173))+(((0.043)*x166))+((x167*x174))+(((0.0099)*x174))+((x166*x168))+pz+((x170*x171))+((sj2*x165*x167))+(((-1.0)*x165*x169))+(((-0.174)*x165))+(((-1.0)*x165*x177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x181=IKPowWithIntegerCheck(pz,-1);
if(!x181.valid){
continue;
}
IkReal x178=x181.value;
IkReal x179=(sj2*sj3);
IkReal x180=(cj2*cj3);
CheckValue<IkReal> x182=IKPowWithIntegerCheck(x178,-2);
if(!x182.valid){
continue;
}
if( IKabs(((0.0232558139534884)*x178*(((25.42563)+(((8.352)*x180))+(((-1.7226)*sj2))+(((-500.0)*(x182.value)))+(((24.621)*cj2))+(((6.792)*cj3))+(((0.4752)*sj3))+(((-8.352)*x179)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x178*(((0.174)+(((0.048)*x180))+(((0.1415)*cj2))+(((-0.0099)*sj2))+(((-0.048)*x179)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0232558139534884)*x178*(((25.42563)+(((8.352)*x180))+(((-1.7226)*sj2))+(((-500.0)*(x182.value)))+(((24.621)*cj2))+(((6.792)*cj3))+(((0.4752)*sj3))+(((-8.352)*x179))))))+IKsqr((x178*(((0.174)+(((0.048)*x180))+(((0.1415)*cj2))+(((-0.0099)*sj2))+(((-0.048)*x179))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0232558139534884)*x178*(((25.42563)+(((8.352)*x180))+(((-1.7226)*sj2))+(((-500.0)*(x182.value)))+(((24.621)*cj2))+(((6.792)*cj3))+(((0.4752)*sj3))+(((-8.352)*x179))))), (x178*(((0.174)+(((0.048)*x180))+(((0.1415)*cj2))+(((-0.0099)*sj2))+(((-0.048)*x179))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x183=IKcos(j1);
IkReal x184=IKsin(j1);
IkReal x185=((0.048)*sj3);
IkReal x186=((0.1415)*sj2);
IkReal x187=((0.1415)*cj2);
IkReal x188=((0.048)*cj3);
IkReal x189=(sj2*x184);
IkReal x190=(sj2*x188);
IkReal x191=((0.0099)*x183);
IkReal x192=(cj2*x184);
IkReal x193=(pz*x183);
IkReal x194=(pz*x184);
IkReal x195=(cj2*x188);
evalcond[0]=((-0.174)+((sj2*x185))+(((-1.0)*x187))+(((0.0099)*sj2))+(((-1.0)*x195))+x193);
evalcond[1]=((0.043)+x190+x194+x186+((cj2*x185))+(((0.0099)*cj2)));
evalcond[2]=((-0.00970074)+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((0.348)*x193))+(((-0.086)*x194))+(((0.0009504)*sj3)));
evalcond[3]=(((cj2*x183*x185))+(((-0.0099)*x189))+(((0.043)*x183))+((x188*x192))+((x184*x187))+(((0.174)*x184))+((cj2*x191))+(((-1.0)*x185*x189))+((x183*x186))+((x183*x190)));
evalcond[4]=(((sj2*x191))+(((0.043)*x184))+((sj2*x183*x185))+((x188*x189))+((x185*x192))+((x184*x186))+pz+(((0.0099)*x192))+(((-0.174)*x183))+(((-1.0)*x183*x187))+(((-1.0)*x183*x195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x196=((0.048)*sj3);
IkReal x197=((0.048)*cj3);
CheckValue<IkReal> x198 = IKatan2WithCheck(IkReal(((-0.043)+(((-0.0099)*cj2))+(((-0.1415)*sj2))+(((-1.0)*sj2*x197))+(((-1.0)*cj2*x196)))),IkReal(((0.174)+((cj2*x197))+(((-1.0)*sj2*x196))+(((0.1415)*cj2))+(((-0.0099)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x198.valid){
continue;
}
CheckValue<IkReal> x199=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x199.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x198.value)+(((1.5707963267949)*(x199.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x200=IKcos(j1);
IkReal x201=IKsin(j1);
IkReal x202=((0.048)*sj3);
IkReal x203=((0.1415)*sj2);
IkReal x204=((0.1415)*cj2);
IkReal x205=((0.048)*cj3);
IkReal x206=(sj2*x201);
IkReal x207=(sj2*x205);
IkReal x208=((0.0099)*x200);
IkReal x209=(cj2*x201);
IkReal x210=(pz*x200);
IkReal x211=(pz*x201);
IkReal x212=(cj2*x205);
evalcond[0]=((-0.174)+(((0.0099)*sj2))+(((-1.0)*x204))+x210+(((-1.0)*x212))+((sj2*x202)));
evalcond[1]=((0.043)+((cj2*x202))+x211+x207+x203+(((0.0099)*cj2)));
evalcond[2]=((-0.00970074)+(((-0.086)*x211))+(((0.348)*x210))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((0.0009504)*sj3)));
evalcond[3]=((((0.043)*x200))+((x205*x209))+((cj2*x208))+(((0.174)*x201))+((x200*x203))+((x200*x207))+((x201*x204))+(((-1.0)*x202*x206))+(((-0.0099)*x206))+((cj2*x200*x202)));
evalcond[4]=(((sj2*x200*x202))+(((-1.0)*x200*x204))+(((0.043)*x201))+((x205*x206))+((x201*x203))+(((-0.174)*x200))+pz+(((-1.0)*x200*x212))+((x202*x209))+(((0.0099)*x209))+((sj2*x208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x213=pz*pz;
CheckValue<IkReal> x216 = IKatan2WithCheck(IkReal(((0.348)*pz)),IkReal(((-0.086)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x216.valid){
continue;
}
IkReal x214=((1.0)*(x216.value));
if((x213) < -0.00001)
continue;
CheckValue<IkReal> x217=IKPowWithIntegerCheck(IKabs(((35.8468966578698)*(IKsqrt(x213)))),-1);
if(!x217.valid){
continue;
}
if( (((100.0)*(x217.value)*(((-0.00970074)+(((0.013584)*cj3))+(((-1.0)*x213))+(((0.0009504)*sj3)))))) < -1-IKFAST_SINCOS_THRESH || (((100.0)*(x217.value)*(((-0.00970074)+(((0.013584)*cj3))+(((-1.0)*x213))+(((0.0009504)*sj3)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x215=IKasin(((100.0)*(x217.value)*(((-0.00970074)+(((0.013584)*cj3))+(((-1.0)*x213))+(((0.0009504)*sj3))))));
j1array[0]=((((-1.0)*x215))+(((-1.0)*x214)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+x215+(((-1.0)*x214)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j2eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x218=(pz*sj1);
IkReal x219=((0.048)*sj3);
IkReal x220=(cj1*pz);
IkReal x221=((0.048)*cj3);
j2eval[0]=((-23.5945496632997)+(((-1.0)*sj3))+(((-14.2929292929293)*cj3)));
j2eval[1]=((IKabs(((0.0043619)+(((-0.008352)*sj3))+(((0.1415)*x218))+((x219*x220))+(((0.002064)*cj3))+((x218*x221))+(((0.0099)*x220)))))+(IKabs(((0.0250467)+((x218*x219))+(((0.002064)*sj3))+(((0.0099)*x218))+(((-1.0)*x220*x221))+(((0.008352)*cj3))+(((-0.1415)*x220))))));
j2eval[2]=IKsign(((-0.02242426)+(((-0.0009504)*sj3))+(((-0.013584)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x222=cj1*cj1;
IkReal x223=(cj1*sj3);
IkReal x224=(pz*sj1);
IkReal x225=((480000.0)*cj3);
IkReal x226=(cj1*cj3);
IkReal x227=(pz*x222);
j2eval[0]=((((-23.5945496632997)*cj1))+(((-14.2929292929293)*x226))+(((-1.0)*x223)));
j2eval[1]=((IKabs(((((99000.0)*x227))+(((-83520.0)*x223))+(((20640.0)*x226))+(((480000.0)*sj3*x227))+(((1415000.0)*cj1*x224))+(((43619.0)*cj1))+((cj1*x224*x225)))))+(IKabs(((((250467.0)*cj1))+(((99000.0)*cj1*x224))+(((-1.0)*x225*x227))+(((20640.0)*x223))+(((480000.0)*x223*x224))+(((-1415000.0)*x227))+(((83520.0)*x226))))));
j2eval[2]=IKsign(((((-0.02242426)*cj1))+(((-0.0009504)*x223))+(((-0.013584)*x226))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
px=0;
py=0;
pp=pz*pz;
j2eval[0]=((-23.5945496632997)+(((-1.0)*sj3))+(((-14.2929292929293)*cj3)));
j2eval[1]=IKsign(((-0.00192848636)+(((-8.17344e-5)*sj3))+(((-0.001168224)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
px=0;
py=0;
pp=pz*pz;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x228=((24.0)*pz);
j2eval[0]=((-23.5945496632997)+(((-1.0)*sj3))+(((-14.2929292929293)*cj3)));
j2eval[1]=IKsign(((-11.21213)+(((-6.792)*cj3))+(((-0.4752)*sj3))));
j2eval[2]=((IKabs(((2.18095)+((cj3*x228))+(((-4.176)*sj3))+(((70.75)*pz))+(((1.032)*cj3)))))+(IKabs(((12.52335)+(((4.176)*cj3))+((sj3*x228))+(((1.032)*sj3))+(((4.95)*pz))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
px=0;
py=0;
pp=pz*pz;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x229=pz*pz;
IkReal x230=cj3*cj3;
IkReal x231=(cj3*sj3);
IkReal x232=((24.0)*x229);
j2eval[0]=((-23.5945496632997)+(((-1.0)*sj3))+(((-14.2929292929293)*cj3)));
j2eval[1]=IKsign(((-0.96424318)+(((-0.0408672)*sj3))+(((-0.584112)*cj3))));
j2eval[2]=((IKabs(((-0.498765655)+(((0.81700224)*cj3))+(((-0.2918952)*sj3))+(((0.326016)*x230))+(((-1.0)*cj3*x232))+(((0.0228096)*x231))+(((-70.75)*x229)))))+(IKabs(((1.051799037)+(((-0.13936128)*sj3))+(((0.326016)*x231))+(((-4.95)*x229))+(((0.4263768)*cj3))+(((-0.0228096)*x230))+(((-1.0)*sj3*x232))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
px=0;
py=0;
pp=pz*pz;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=((-23.5945496632997)+(((-1.0)*sj3))+(((-14.2929292929293)*cj3)));
j2eval[1]=IKsign(((-0.00780364248)+(((-0.0003307392)*sj3))+(((-0.004727232)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x233=pz*pz;
IkReal x234=cj3*cj3;
IkReal x235=(cj3*pz);
IkReal x236=(cj3*sj3);
IkReal x237=(pz*sj3);
IkReal x238=((0.048)*x233);
CheckValue<IkReal> x239=IKPowWithIntegerCheck(IKsign(((-0.00780364248)+(((-0.0003307392)*sj3))+(((-0.004727232)*cj3)))),-1);
if(!x239.valid){
continue;
}
CheckValue<IkReal> x240 = IKatan2WithCheck(IkReal(((0.001568359326)+(((0.0099)*x233))+(((-0.00245026944)*sj3))+(((0.0500934)*pz))+(((4.56192e-5)*x234))+(((0.0005837904)*cj3))+(((0.016704)*x235))+(((-0.000652032)*x236))+(((0.004128)*x237))+((sj3*x238)))),IkReal(((0.00734359689)+(((-0.1415)*x233))+(((-0.0087238)*pz))+(((0.000652032)*x234))+(((0.0008527536)*sj3))+(((-0.004128)*x235))+(((4.56192e-5)*x236))+(((-1.0)*cj3*x238))+(((0.016704)*x237))+(((0.00436299648)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x240.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x239.value)))+(x240.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x241=IKsin(j2);
IkReal x242=IKcos(j2);
IkReal x243=(cj3*x242);
IkReal x244=(sj3*x241);
IkReal x245=(sj3*x242);
IkReal x246=(cj3*x241);
evalcond[0]=((-0.174)+(((0.048)*x244))+(((-0.048)*x243))+(((-0.1415)*x242))+(((0.0099)*x241)));
evalcond[1]=((0.043)+(((0.048)*x245))+(((0.048)*x246))+pz+(((0.0099)*x242))+(((0.1415)*x241)));
evalcond[2]=((0.05454926)+(((0.004128)*x245))+(((0.004128)*x246))+(((-0.016704)*x244))+(((0.013584)*cj3))+(((0.0500934)*x242))+(((0.016704)*x243))+(((-1.0)*(pz*pz)))+(((0.0009504)*sj3))+(((0.0087238)*x241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x247=pz*pz;
IkReal x248=cj3*cj3;
IkReal x249=(cj3*sj3);
IkReal x250=((24.0)*x247);
CheckValue<IkReal> x251=IKPowWithIntegerCheck(IKsign(((-0.96424318)+(((-0.0408672)*sj3))+(((-0.584112)*cj3)))),-1);
if(!x251.valid){
continue;
}
CheckValue<IkReal> x252 = IKatan2WithCheck(IkReal(((-0.498765655)+(((0.0228096)*x249))+(((0.81700224)*cj3))+(((0.326016)*x248))+(((-0.2918952)*sj3))+(((-70.75)*x247))+(((-1.0)*cj3*x250)))),IkReal(((1.051799037)+(((-4.95)*x247))+(((0.326016)*x249))+(((-0.13936128)*sj3))+(((-1.0)*sj3*x250))+(((0.4263768)*cj3))+(((-0.0228096)*x248)))),IKFAST_ATAN2_MAGTHRESH);
if(!x252.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x251.value)))+(x252.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x253=IKsin(j2);
IkReal x254=IKcos(j2);
IkReal x255=(cj3*x254);
IkReal x256=(sj3*x253);
IkReal x257=(sj3*x254);
IkReal x258=(cj3*x253);
evalcond[0]=((-0.174)+(((-0.1415)*x254))+(((0.048)*x256))+(((-0.048)*x255))+(((0.0099)*x253)));
evalcond[1]=((0.043)+(((0.048)*x257))+(((0.048)*x258))+pz+(((0.1415)*x253))+(((0.0099)*x254)));
evalcond[2]=((0.05454926)+(((-0.016704)*x256))+(((0.016704)*x255))+(((0.0500934)*x254))+(((0.0087238)*x253))+(((0.004128)*x257))+(((0.004128)*x258))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x259=((24.0)*pz);
CheckValue<IkReal> x260=IKPowWithIntegerCheck(IKsign(((-11.21213)+(((-6.792)*cj3))+(((-0.4752)*sj3)))),-1);
if(!x260.valid){
continue;
}
CheckValue<IkReal> x261 = IKatan2WithCheck(IkReal(((2.18095)+((cj3*x259))+(((-4.176)*sj3))+(((70.75)*pz))+(((1.032)*cj3)))),IkReal(((12.52335)+(((4.176)*cj3))+((sj3*x259))+(((1.032)*sj3))+(((4.95)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x261.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x260.value)))+(x261.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x262=IKsin(j2);
IkReal x263=IKcos(j2);
IkReal x264=(cj3*x263);
IkReal x265=(sj3*x262);
IkReal x266=(sj3*x263);
IkReal x267=(cj3*x262);
evalcond[0]=((-0.174)+(((0.048)*x265))+(((-0.048)*x264))+(((-0.1415)*x263))+(((0.0099)*x262)));
evalcond[1]=((0.043)+(((0.048)*x266))+(((0.048)*x267))+pz+(((0.0099)*x263))+(((0.1415)*x262)));
evalcond[2]=((0.05454926)+(((0.004128)*x266))+(((0.004128)*x267))+(((-0.016704)*x265))+(((0.013584)*cj3))+(((0.016704)*x264))+(((-1.0)*(pz*pz)))+(((0.0500934)*x263))+(((0.0087238)*x262))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
px=0;
py=0;
pp=pz*pz;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x268=((24.0)*pz);
j2eval[0]=((-23.5945496632997)+(((-1.0)*sj3))+(((-14.2929292929293)*cj3)));
j2eval[1]=((IKabs(((2.18095)+(((-4.176)*sj3))+(((-1.0)*cj3*x268))+(((1.032)*cj3))+(((-70.75)*pz)))))+(IKabs(((12.52335)+(((-1.0)*sj3*x268))+(((4.176)*cj3))+(((1.032)*sj3))+(((-4.95)*pz))))));
j2eval[2]=IKsign(((-11.21213)+(((-6.792)*cj3))+(((-0.4752)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
px=0;
py=0;
pp=pz*pz;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x269=pz*pz;
IkReal x270=cj3*cj3;
IkReal x271=(cj3*sj3);
IkReal x272=((24.0)*x269);
j2eval[0]=((-23.5945496632997)+(((-1.0)*sj3))+(((-14.2929292929293)*cj3)));
j2eval[1]=IKsign(((-0.96424318)+(((-0.0408672)*sj3))+(((-0.584112)*cj3))));
j2eval[2]=((IKabs(((-0.498765655)+(((0.0228096)*x271))+(((0.81700224)*cj3))+(((0.326016)*x270))+(((-0.2918952)*sj3))+(((-1.0)*cj3*x272))+(((-70.75)*x269)))))+(IKabs(((1.051799037)+(((-4.95)*x269))+(((-1.0)*sj3*x272))+(((0.326016)*x271))+(((-0.13936128)*sj3))+(((0.4263768)*cj3))+(((-0.0228096)*x270))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
px=0;
py=0;
pp=pz*pz;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=((-23.5945496632997)+(((-1.0)*sj3))+(((-14.2929292929293)*cj3)));
j2eval[1]=IKsign(((-0.00780364248)+(((-0.0003307392)*sj3))+(((-0.004727232)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x273=pz*pz;
IkReal x274=cj3*cj3;
IkReal x275=(cj3*sj3);
IkReal x276=(cj3*pz);
IkReal x277=(pz*sj3);
IkReal x278=((0.048)*x273);
CheckValue<IkReal> x279 = IKatan2WithCheck(IkReal(((0.001568359326)+(((-0.00245026944)*sj3))+((sj3*x278))+(((-0.016704)*x276))+(((-0.004128)*x277))+(((-0.000652032)*x275))+(((0.0099)*x273))+(((0.0005837904)*cj3))+(((-0.0500934)*pz))+(((4.56192e-5)*x274)))),IkReal(((0.00734359689)+(((0.004128)*x276))+(((-0.1415)*x273))+(((0.0087238)*pz))+(((0.000652032)*x274))+(((-0.016704)*x277))+(((-1.0)*cj3*x278))+(((0.0008527536)*sj3))+(((0.00436299648)*cj3))+(((4.56192e-5)*x275)))),IKFAST_ATAN2_MAGTHRESH);
if(!x279.valid){
continue;
}
CheckValue<IkReal> x280=IKPowWithIntegerCheck(IKsign(((-0.00780364248)+(((-0.0003307392)*sj3))+(((-0.004727232)*cj3)))),-1);
if(!x280.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x279.value)+(((1.5707963267949)*(x280.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x281=IKsin(j2);
IkReal x282=IKcos(j2);
IkReal x283=(cj3*x282);
IkReal x284=(sj3*x281);
IkReal x285=(sj3*x282);
IkReal x286=(cj3*x281);
evalcond[0]=((-0.174)+(((-0.048)*x283))+(((0.048)*x284))+(((0.0099)*x281))+(((-0.1415)*x282)));
evalcond[1]=((0.043)+(((0.048)*x286))+(((0.048)*x285))+(((0.0099)*x282))+(((0.1415)*x281))+(((-1.0)*pz)));
evalcond[2]=((0.05454926)+(((0.0087238)*x281))+(((0.004128)*x285))+(((0.004128)*x286))+(((0.016704)*x283))+(((-0.016704)*x284))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((0.0500934)*x282))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x287=pz*pz;
IkReal x288=cj3*cj3;
IkReal x289=(cj3*sj3);
IkReal x290=((24.0)*x287);
CheckValue<IkReal> x291=IKPowWithIntegerCheck(IKsign(((-0.96424318)+(((-0.0408672)*sj3))+(((-0.584112)*cj3)))),-1);
if(!x291.valid){
continue;
}
CheckValue<IkReal> x292 = IKatan2WithCheck(IkReal(((-0.498765655)+(((0.81700224)*cj3))+(((0.0228096)*x289))+(((-0.2918952)*sj3))+(((-1.0)*cj3*x290))+(((-70.75)*x287))+(((0.326016)*x288)))),IkReal(((1.051799037)+(((-4.95)*x287))+(((-0.13936128)*sj3))+(((0.4263768)*cj3))+(((-1.0)*sj3*x290))+(((0.326016)*x289))+(((-0.0228096)*x288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x292.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x291.value)))+(x292.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x293=IKsin(j2);
IkReal x294=IKcos(j2);
IkReal x295=(cj3*x294);
IkReal x296=(sj3*x293);
IkReal x297=(sj3*x294);
IkReal x298=(cj3*x293);
evalcond[0]=((-0.174)+(((-0.1415)*x294))+(((-0.048)*x295))+(((0.048)*x296))+(((0.0099)*x293)));
evalcond[1]=((0.043)+(((-1.0)*pz))+(((0.048)*x298))+(((0.048)*x297))+(((0.1415)*x293))+(((0.0099)*x294)));
evalcond[2]=((0.05454926)+(((0.0500934)*x294))+(((0.013584)*cj3))+(((0.0087238)*x293))+(((-1.0)*(pz*pz)))+(((0.016704)*x295))+(((0.004128)*x297))+(((0.004128)*x298))+(((-0.016704)*x296))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x299=((24.0)*pz);
CheckValue<IkReal> x300=IKPowWithIntegerCheck(IKsign(((-11.21213)+(((-6.792)*cj3))+(((-0.4752)*sj3)))),-1);
if(!x300.valid){
continue;
}
CheckValue<IkReal> x301 = IKatan2WithCheck(IkReal(((2.18095)+(((-4.176)*sj3))+(((-1.0)*cj3*x299))+(((1.032)*cj3))+(((-70.75)*pz)))),IkReal(((12.52335)+(((4.176)*cj3))+(((-1.0)*sj3*x299))+(((1.032)*sj3))+(((-4.95)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x301.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x300.value)))+(x301.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x302=IKsin(j2);
IkReal x303=IKcos(j2);
IkReal x304=(cj3*x303);
IkReal x305=(sj3*x302);
IkReal x306=(sj3*x303);
IkReal x307=(cj3*x302);
evalcond[0]=((-0.174)+(((-0.1415)*x303))+(((0.048)*x305))+(((0.0099)*x302))+(((-0.048)*x304)));
evalcond[1]=((0.043)+(((0.048)*x306))+(((0.048)*x307))+(((-1.0)*pz))+(((0.0099)*x303))+(((0.1415)*x302)));
evalcond[2]=((0.05454926)+(((-0.016704)*x305))+(((0.0500934)*x303))+(((0.013584)*cj3))+(((0.004128)*x307))+(((0.004128)*x306))+(((0.0087238)*x302))+(((-1.0)*(pz*pz)))+(((0.016704)*x304))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x308=pz*pz;
IkReal x309=cj3*cj3;
IkReal x310=(cj1*pz);
IkReal x311=(cj3*sj3);
IkReal x312=((0.048)*x308);
CheckValue<IkReal> x313=IKPowWithIntegerCheck(IKsign(((-0.00192848636)+(((-8.17344e-5)*sj3))+(((-0.001168224)*cj3)))),-1);
if(!x313.valid){
continue;
}
CheckValue<IkReal> x314 = IKatan2WithCheck(IkReal(((-0.00099753131)+(((0.016704)*cj3*x310))+(((-0.1415)*x308))+(((0.0500934)*x310))+(((0.000652032)*x309))+(((0.00163400448)*cj3))+(((-0.0005837904)*sj3))+(((4.56192e-5)*x311))+(((0.004128)*sj3*x310))+(((-1.0)*cj3*x312)))),IkReal(((0.002103598074)+(((-0.004128)*cj3*x310))+(((-4.56192e-5)*x309))+(((0.0008527536)*cj3))+(((-0.0087238)*x310))+(((-1.0)*sj3*x312))+(((0.016704)*sj3*x310))+(((-0.00027872256)*sj3))+(((0.000652032)*x311))+(((-0.0099)*x308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x314.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x313.value)))+(x314.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x315=IKsin(j2);
IkReal x316=IKcos(j2);
IkReal x317=((0.048)*sj3);
IkReal x318=((0.048)*sj1);
IkReal x319=((0.0099)*x316);
IkReal x320=((0.0099)*x315);
IkReal x321=((0.1415)*x316);
IkReal x322=(cj3*x315);
IkReal x323=(cj1*x315);
IkReal x324=((0.1415)*x315);
IkReal x325=(cj1*x316);
IkReal x326=(cj3*x316);
evalcond[0]=((-0.174)+(((-1.0)*x321))+((x315*x317))+((cj1*pz))+(((-0.048)*x326))+x320);
evalcond[1]=((0.043)+(((0.048)*x322))+x324+x319+((pz*sj1))+((x316*x317)));
evalcond[2]=((0.05454926)+(((0.0087238)*x315))+(((0.0500934)*x316))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((0.004128)*sj3*x316))+(((0.004128)*x322))+(((0.016704)*x326))+(((0.0009504)*sj3))+(((-0.016704)*sj3*x315)));
evalcond[3]=(((x318*x326))+(((-1.0)*sj1*x320))+(((0.174)*sj1))+(((-1.0)*sj1*x315*x317))+(((0.048)*cj1*x322))+((cj1*x319))+(((0.043)*cj1))+((sj1*x321))+((x317*x325))+(((0.1415)*x323)));
evalcond[4]=(((x318*x322))+((cj1*x320))+(((-1.0)*cj1*x321))+(((-0.048)*cj3*x325))+((sj1*x319))+(((0.043)*sj1))+((sj1*x324))+pz+((sj1*x316*x317))+((x317*x323))+(((-0.174)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x327=cj1*cj1;
IkReal x328=(cj1*cj3);
IkReal x329=((0.048)*pz);
IkReal x330=(cj1*sj3);
IkReal x331=((0.0099)*pz);
IkReal x332=(cj1*sj1);
IkReal x333=((0.1415)*pz);
CheckValue<IkReal> x334=IKPowWithIntegerCheck(IKsign(((((-0.02242426)*cj1))+(((-0.0009504)*x330))+(((-0.013584)*x328)))),-1);
if(!x334.valid){
continue;
}
CheckValue<IkReal> x335 = IKatan2WithCheck(IkReal(((((0.002064)*x328))+((sj3*x327*x329))+((x332*x333))+((sj1*x328*x329))+(((-0.008352)*x330))+((x327*x331))+(((0.0043619)*cj1)))),IkReal(((((-1.0)*cj3*x327*x329))+((sj1*x329*x330))+((x331*x332))+(((0.008352)*x328))+(((0.0250467)*cj1))+(((0.002064)*x330))+(((-1.0)*x327*x333)))),IKFAST_ATAN2_MAGTHRESH);
if(!x335.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x334.value)))+(x335.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x336=IKsin(j2);
IkReal x337=IKcos(j2);
IkReal x338=((0.048)*sj3);
IkReal x339=((0.048)*sj1);
IkReal x340=((0.0099)*x337);
IkReal x341=((0.0099)*x336);
IkReal x342=((0.1415)*x337);
IkReal x343=(cj3*x336);
IkReal x344=(cj1*x336);
IkReal x345=((0.1415)*x336);
IkReal x346=(cj1*x337);
IkReal x347=(cj3*x337);
evalcond[0]=((-0.174)+((x336*x338))+((cj1*pz))+x341+(((-1.0)*x342))+(((-0.048)*x347)));
evalcond[1]=((0.043)+((x337*x338))+(((0.048)*x343))+x340+x345+((pz*sj1)));
evalcond[2]=((0.05454926)+(((0.004128)*sj3*x337))+(((0.0500934)*x337))+(((0.004128)*x343))+(((0.013584)*cj3))+(((0.0087238)*x336))+(((0.016704)*x347))+(((-1.0)*(pz*pz)))+(((-0.016704)*sj3*x336))+(((0.0009504)*sj3)));
evalcond[3]=((((0.174)*sj1))+(((0.1415)*x344))+(((0.048)*cj1*x343))+(((0.043)*cj1))+((cj1*x340))+((sj1*x342))+((x338*x346))+(((-1.0)*sj1*x336*x338))+((x339*x347))+(((-1.0)*sj1*x341)));
evalcond[4]=(((sj1*x337*x338))+(((-1.0)*cj1*x342))+(((0.043)*sj1))+((cj1*x341))+(((-0.048)*cj3*x346))+pz+((sj1*x345))+((sj1*x340))+((x338*x344))+(((-0.174)*cj1))+((x339*x343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x348=(pz*sj1);
IkReal x349=((0.048)*sj3);
IkReal x350=(cj1*pz);
IkReal x351=((0.048)*cj3);
CheckValue<IkReal> x352 = IKatan2WithCheck(IkReal(((0.0043619)+(((-0.008352)*sj3))+(((0.1415)*x348))+(((0.0099)*x350))+(((0.002064)*cj3))+((x349*x350))+((x348*x351)))),IkReal(((0.0250467)+((x348*x349))+(((0.002064)*sj3))+(((0.0099)*x348))+(((-0.1415)*x350))+(((0.008352)*cj3))+(((-1.0)*x350*x351)))),IKFAST_ATAN2_MAGTHRESH);
if(!x352.valid){
continue;
}
CheckValue<IkReal> x353=IKPowWithIntegerCheck(IKsign(((-0.02242426)+(((-0.0009504)*sj3))+(((-0.013584)*cj3)))),-1);
if(!x353.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x352.value)+(((1.5707963267949)*(x353.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x354=IKsin(j2);
IkReal x355=IKcos(j2);
IkReal x356=((0.048)*sj3);
IkReal x357=((0.048)*sj1);
IkReal x358=((0.0099)*x355);
IkReal x359=((0.0099)*x354);
IkReal x360=((0.1415)*x355);
IkReal x361=(cj3*x354);
IkReal x362=(cj1*x354);
IkReal x363=((0.1415)*x354);
IkReal x364=(cj1*x355);
IkReal x365=(cj3*x355);
evalcond[0]=((-0.174)+(((-1.0)*x360))+(((-0.048)*x365))+((cj1*pz))+x359+((x354*x356)));
evalcond[1]=((0.043)+((x355*x356))+x358+x363+((pz*sj1))+(((0.048)*x361)));
evalcond[2]=((0.05454926)+(((0.004128)*sj3*x355))+(((0.016704)*x365))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-0.016704)*sj3*x354))+(((0.0087238)*x354))+(((0.004128)*x361))+(((0.0500934)*x355))+(((0.0009504)*sj3)));
evalcond[3]=(((cj1*x358))+(((0.174)*sj1))+(((-1.0)*sj1*x354*x356))+((sj1*x360))+(((0.043)*cj1))+(((0.1415)*x362))+(((0.048)*cj1*x361))+((x356*x364))+((x357*x365))+(((-1.0)*sj1*x359)));
evalcond[4]=(((cj1*x359))+(((-0.048)*cj3*x364))+((sj1*x363))+(((-1.0)*cj1*x360))+((sj1*x355*x356))+(((0.043)*sj1))+((x356*x362))+pz+((sj1*x358))+(((-0.174)*cj1))+((x357*x361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x366=((0.0087238)+(((0.004128)*cj3))+(((-0.016704)*sj3)));
IkReal x367=((0.0500934)+(((0.016704)*cj3))+(((0.004128)*sj3)));
CheckValue<IkReal> x370 = IKatan2WithCheck(IkReal(x367),IkReal(x366),IKFAST_ATAN2_MAGTHRESH);
if(!x370.valid){
continue;
}
IkReal x368=((1.0)*(x370.value));
if((((x367*x367)+(x366*x366))) < -0.00001)
continue;
CheckValue<IkReal> x371=IKPowWithIntegerCheck(IKabs(IKsqrt(((x367*x367)+(x366*x366)))),-1);
if(!x371.valid){
continue;
}
if( (((x371.value)*(((0.05454926)+(((-1.0)*(px*px)))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)))))) < -1-IKFAST_SINCOS_THRESH || (((x371.value)*(((0.05454926)+(((-1.0)*(px*px)))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x369=IKasin(((x371.value)*(((0.05454926)+(((-1.0)*(px*px)))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0009504)*sj3))))));
j2array[0]=((((-1.0)*x369))+(((-1.0)*x368)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x368))+x369);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x372=sj2*sj2;
IkReal x373=cj2*cj2;
IkReal x374=cj3*cj3;
IkReal x375=sj3*sj3;
IkReal x376=((0.048)*cj2);
IkReal x377=(cj3*sj2);
IkReal x378=(sj2*sj3);
IkReal x379=((14.2929292929293)*cj3);
IkReal x380=((2.42424242424242)*x372);
IkReal x381=((2.42424242424242)*x373);
j1eval[0]=((IKabs(((-0.174)+(((-0.1415)*cj2))+(((0.0099)*sj2))+(((0.048)*x378))+(((-1.0)*cj3*x376)))))+(IKabs(((0.043)+(((0.1415)*sj2))+((sj3*x376))+(((0.0099)*cj2))+(((0.048)*x377))))));
j1eval[1]=((33.8015572390572)+(((4.34343434343434)*x377))+((x374*x381))+((x374*x380))+((x372*x379))+(((-17.5757575757576)*x378))+(((17.5757575757576)*cj2*cj3))+(((52.707702020202)*cj2))+((sj3*x372))+((sj3*x373))+((x373*x379))+((x375*x380))+((x375*x381))+(((21.1703072390572)*x372))+(((21.1703072390572)*x373))+(((4.34343434343434)*cj2*sj3))+(((9.17908249158249)*sj2)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x382=((0.048)*sj3);
IkReal x383=((0.048)*cj3);
j1eval[0]=pz;
j1eval[1]=((IKabs(((0.174)+((cj2*x383))+(((0.1415)*cj2))+(((-1.0)*sj2*x382))+(((-0.0099)*sj2)))))+(IKabs(((-0.043)+(((-1.0)*cj2*x382))+(((-0.0099)*cj2))+(((-0.1415)*sj2))+(((-1.0)*sj2*x383))))));
j1eval[2]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x384=(cj2*pz);
IkReal x385=(pz*sj2);
j1eval[0]=((((14.2929292929293)*x384))+(((-1.0)*x385))+(((-4.84848484848485)*sj3*x385))+(((17.5757575757576)*pz))+(((4.84848484848485)*cj3*x384)));
j1eval[1]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x386=((0.048)*cj2);
IkReal x387=((0.048)*sj2);
j1eval[0]=((IKabs(((0.043)+(((0.1415)*sj2))+((cj3*x387))+(((0.0099)*cj2))+((sj3*x386)))))+(IKabs(((-0.174)+(((-0.1415)*cj2))+(((0.0099)*sj2))+((sj3*x387))+(((-1.0)*cj3*x386))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x388=((0.048)*sj3);
IkReal x389=((0.048)*cj3);
j1eval[0]=((IKabs(((0.043)+(((0.1415)*sj2))+((cj2*x388))+(((0.0099)*cj2))+((sj2*x389)))))+(IKabs(((0.174)+((cj2*x389))+(((0.1415)*cj2))+(((-1.0)*sj2*x388))+(((-0.0099)*sj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x390=((0.048)*sj3);
IkReal x391=((0.048)*cj3);
CheckValue<IkReal> x393 = IKatan2WithCheck(IkReal(((0.043)+(((0.1415)*sj2))+((sj2*x391))+((cj2*x390))+(((0.0099)*cj2)))),IkReal(((0.174)+(((-1.0)*sj2*x390))+((cj2*x391))+(((0.1415)*cj2))+(((-0.0099)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x393.valid){
continue;
}
IkReal x392=x393.value;
j1array[0]=((-1.0)*x392);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x392)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x394=IKsin(j1);
IkReal x395=IKcos(j1);
IkReal x396=((0.048)*sj3);
IkReal x397=((0.048)*cj3);
IkReal x398=(sj2*x394);
IkReal x399=(cj2*x395);
IkReal x400=(cj2*x394);
IkReal x401=(sj2*x395);
evalcond[0]=((((-0.174)*x395))+(((0.043)*x394))+(((0.1415)*x398))+(((0.0099)*x400))+(((0.0099)*x401))+(((-1.0)*x397*x399))+((x397*x398))+((x396*x401))+((x396*x400))+(((-0.1415)*x399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x402=((0.048)*cj2);
IkReal x403=((0.048)*sj2);
CheckValue<IkReal> x405 = IKatan2WithCheck(IkReal(((-0.174)+(((-1.0)*cj3*x402))+(((-0.1415)*cj2))+(((0.0099)*sj2))+((sj3*x403)))),IkReal(((0.043)+(((0.1415)*sj2))+((sj3*x402))+(((0.0099)*cj2))+((cj3*x403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x405.valid){
continue;
}
IkReal x404=x405.value;
j1array[0]=((-1.0)*x404);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x404)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x406=IKcos(j1);
IkReal x407=IKsin(j1);
IkReal x408=((0.048)*sj2);
IkReal x409=((0.048)*cj2);
evalcond[0]=((((-0.0099)*sj2*x407))+((cj3*x407*x409))+((sj3*x406*x409))+(((0.174)*x407))+(((0.1415)*sj2*x406))+(((0.1415)*cj2*x407))+((cj3*x406*x408))+(((0.0099)*cj2*x406))+(((0.043)*x406))+(((-1.0)*sj3*x407*x408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x410=cj2*cj2;
IkReal x411=(sj2*sj3);
IkReal x412=((0.048)*pz);
IkReal x413=(cj2*sj2);
IkReal x414=((0.1415)*cj2);
IkReal x415=((0.0099)*sj2);
IkReal x416=(cj2*cj3);
IkReal x417=(cj3*x410);
CheckValue<IkReal> x418=IKPowWithIntegerCheck(((((0.174)*pz))+((pz*x414))+(((-1.0)*x411*x412))+((x412*x416))+(((-1.0)*pz*x415))),-1);
if(!x418.valid){
continue;
}
CheckValue<IkReal> x419=IKPowWithIntegerCheck(pz,-1);
if(!x419.valid){
continue;
}
if( IKabs(((x418.value)*(((-0.00608115)+(((0.002304)*cj3*sj3))+(((-0.013584)*cj3*x413))+(((-0.0009504)*x417))+(((-0.008352)*cj3*sj2))+(((-0.008352)*cj2*sj3))+(((-0.0078071)*cj2))+(((-0.002064)*x416))+(((-0.004608)*x413*(cj3*cj3)))+(((-0.013584)*sj3*x410))+(((-0.004608)*sj3*x417))+(((-0.0241953)*sj2))+(((-0.01762024)*x413))+(((0.002064)*x411))+(((0.006792)*sj3))+(((0.0004752)*cj3))+(((-0.0028017)*x410))+(((0.0009504)*cj2*x411)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x419.value)*(((0.174)+(((-0.048)*x411))+(((0.048)*x416))+x414+(((-1.0)*x415)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x418.value)*(((-0.00608115)+(((0.002304)*cj3*sj3))+(((-0.013584)*cj3*x413))+(((-0.0009504)*x417))+(((-0.008352)*cj3*sj2))+(((-0.008352)*cj2*sj3))+(((-0.0078071)*cj2))+(((-0.002064)*x416))+(((-0.004608)*x413*(cj3*cj3)))+(((-0.013584)*sj3*x410))+(((-0.004608)*sj3*x417))+(((-0.0241953)*sj2))+(((-0.01762024)*x413))+(((0.002064)*x411))+(((0.006792)*sj3))+(((0.0004752)*cj3))+(((-0.0028017)*x410))+(((0.0009504)*cj2*x411))))))+IKsqr(((x419.value)*(((0.174)+(((-0.048)*x411))+(((0.048)*x416))+x414+(((-1.0)*x415))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x418.value)*(((-0.00608115)+(((0.002304)*cj3*sj3))+(((-0.013584)*cj3*x413))+(((-0.0009504)*x417))+(((-0.008352)*cj3*sj2))+(((-0.008352)*cj2*sj3))+(((-0.0078071)*cj2))+(((-0.002064)*x416))+(((-0.004608)*x413*(cj3*cj3)))+(((-0.013584)*sj3*x410))+(((-0.004608)*sj3*x417))+(((-0.0241953)*sj2))+(((-0.01762024)*x413))+(((0.002064)*x411))+(((0.006792)*sj3))+(((0.0004752)*cj3))+(((-0.0028017)*x410))+(((0.0009504)*cj2*x411))))), ((x419.value)*(((0.174)+(((-0.048)*x411))+(((0.048)*x416))+x414+(((-1.0)*x415))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x420=IKcos(j1);
IkReal x421=IKsin(j1);
IkReal x422=((0.048)*sj3);
IkReal x423=((0.1415)*sj2);
IkReal x424=((0.1415)*cj2);
IkReal x425=((0.048)*cj3);
IkReal x426=(sj2*x421);
IkReal x427=(sj2*x425);
IkReal x428=((0.0099)*x420);
IkReal x429=(cj2*x421);
IkReal x430=(pz*x420);
IkReal x431=(pz*x421);
IkReal x432=(cj2*x425);
evalcond[0]=((-0.174)+(((-1.0)*x432))+(((-1.0)*x424))+(((0.0099)*sj2))+x430+((sj2*x422)));
evalcond[1]=((0.043)+x427+x423+x431+(((0.0099)*cj2))+((cj2*x422)));
evalcond[2]=((-0.00970074)+(((0.013584)*cj3))+(((0.348)*x430))+(((-1.0)*(pz*pz)))+(((-0.086)*x431))+(((0.0009504)*sj3)));
evalcond[3]=((((-1.0)*x422*x426))+((x420*x423))+((x420*x427))+((x425*x429))+(((0.174)*x421))+(((-0.0099)*x426))+((cj2*x420*x422))+(((0.043)*x420))+((cj2*x428))+((x421*x424)));
evalcond[4]=(((x425*x426))+(((-1.0)*x420*x424))+(((-1.0)*x420*x432))+(((0.0099)*x429))+pz+(((0.043)*x421))+((sj2*x420*x422))+((sj2*x428))+(((-0.174)*x420))+((x422*x429))+((x421*x423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x436=IKPowWithIntegerCheck(pz,-1);
if(!x436.valid){
continue;
}
IkReal x433=x436.value;
IkReal x434=(sj2*sj3);
IkReal x435=(cj2*cj3);
CheckValue<IkReal> x437=IKPowWithIntegerCheck(x433,-2);
if(!x437.valid){
continue;
}
if( IKabs(((0.0232558139534884)*x433*(((25.42563)+(((-1.7226)*sj2))+(((-8.352)*x434))+(((-500.0)*(x437.value)))+(((24.621)*cj2))+(((8.352)*x435))+(((6.792)*cj3))+(((0.4752)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x433*(((0.174)+(((-0.048)*x434))+(((0.1415)*cj2))+(((0.048)*x435))+(((-0.0099)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0232558139534884)*x433*(((25.42563)+(((-1.7226)*sj2))+(((-8.352)*x434))+(((-500.0)*(x437.value)))+(((24.621)*cj2))+(((8.352)*x435))+(((6.792)*cj3))+(((0.4752)*sj3))))))+IKsqr((x433*(((0.174)+(((-0.048)*x434))+(((0.1415)*cj2))+(((0.048)*x435))+(((-0.0099)*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0232558139534884)*x433*(((25.42563)+(((-1.7226)*sj2))+(((-8.352)*x434))+(((-500.0)*(x437.value)))+(((24.621)*cj2))+(((8.352)*x435))+(((6.792)*cj3))+(((0.4752)*sj3))))), (x433*(((0.174)+(((-0.048)*x434))+(((0.1415)*cj2))+(((0.048)*x435))+(((-0.0099)*sj2))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x438=IKcos(j1);
IkReal x439=IKsin(j1);
IkReal x440=((0.048)*sj3);
IkReal x441=((0.1415)*sj2);
IkReal x442=((0.1415)*cj2);
IkReal x443=((0.048)*cj3);
IkReal x444=(sj2*x439);
IkReal x445=(sj2*x443);
IkReal x446=((0.0099)*x438);
IkReal x447=(cj2*x439);
IkReal x448=(pz*x438);
IkReal x449=(pz*x439);
IkReal x450=(cj2*x443);
evalcond[0]=((-0.174)+(((-1.0)*x442))+(((0.0099)*sj2))+(((-1.0)*x450))+x448+((sj2*x440)));
evalcond[1]=((0.043)+x449+x445+x441+((cj2*x440))+(((0.0099)*cj2)));
evalcond[2]=((-0.00970074)+(((0.013584)*cj3))+(((0.348)*x448))+(((-1.0)*(pz*pz)))+(((-0.086)*x449))+(((0.0009504)*sj3)));
evalcond[3]=(((x439*x442))+(((0.174)*x439))+(((-0.0099)*x444))+((cj2*x438*x440))+(((0.043)*x438))+((cj2*x446))+((x438*x445))+((x438*x441))+((x443*x447))+(((-1.0)*x440*x444)));
evalcond[4]=(((x439*x441))+(((-1.0)*x438*x442))+(((0.0099)*x447))+((x440*x447))+(((0.043)*x439))+pz+((sj2*x446))+(((-0.174)*x438))+(((-1.0)*x438*x450))+((sj2*x438*x440))+((x443*x444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x451=((0.048)*sj3);
IkReal x452=((0.048)*cj3);
CheckValue<IkReal> x453 = IKatan2WithCheck(IkReal(((-0.043)+(((-0.0099)*cj2))+(((-0.1415)*sj2))+(((-1.0)*sj2*x452))+(((-1.0)*cj2*x451)))),IkReal(((0.174)+(((-1.0)*sj2*x451))+((cj2*x452))+(((0.1415)*cj2))+(((-0.0099)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x453.valid){
continue;
}
CheckValue<IkReal> x454=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x454.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x453.value)+(((1.5707963267949)*(x454.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x455=IKcos(j1);
IkReal x456=IKsin(j1);
IkReal x457=((0.048)*sj3);
IkReal x458=((0.1415)*sj2);
IkReal x459=((0.1415)*cj2);
IkReal x460=((0.048)*cj3);
IkReal x461=(sj2*x456);
IkReal x462=(sj2*x460);
IkReal x463=((0.0099)*x455);
IkReal x464=(cj2*x456);
IkReal x465=(pz*x455);
IkReal x466=(pz*x456);
IkReal x467=(cj2*x460);
evalcond[0]=((-0.174)+((sj2*x457))+(((0.0099)*sj2))+(((-1.0)*x467))+(((-1.0)*x459))+x465);
evalcond[1]=((0.043)+((cj2*x457))+x458+x462+x466+(((0.0099)*cj2)));
evalcond[2]=((-0.00970074)+(((0.348)*x465))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-0.086)*x466))+(((0.0009504)*sj3)));
evalcond[3]=(((x455*x462))+((x455*x458))+(((0.043)*x455))+(((-0.0099)*x461))+((cj2*x463))+((x460*x464))+(((0.174)*x456))+((cj2*x455*x457))+(((-1.0)*x457*x461))+((x456*x459)));
evalcond[4]=(((sj2*x455*x457))+(((0.0099)*x464))+(((0.043)*x456))+(((-0.174)*x455))+(((-1.0)*x455*x459))+pz+((x460*x461))+(((-1.0)*x455*x467))+((x457*x464))+((x456*x458))+((sj2*x463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x468=((0.048)*cj2);
IkReal x469=((0.048)*sj2);
IkReal x470=((-0.174)+((sj3*x469))+(((-0.1415)*cj2))+(((0.0099)*sj2))+(((-1.0)*cj3*x468)));
IkReal x471=((0.043)+(((0.1415)*sj2))+((sj3*x468))+((cj3*x469))+(((0.0099)*cj2)));
CheckValue<IkReal> x474 = IKatan2WithCheck(IkReal(x470),IkReal(x471),IKFAST_ATAN2_MAGTHRESH);
if(!x474.valid){
continue;
}
IkReal x472=((1.0)*(x474.value));
if((((x471*x471)+(x470*x470))) < -0.00001)
continue;
CheckValue<IkReal> x475=IKPowWithIntegerCheck(IKabs(IKsqrt(((x471*x471)+(x470*x470)))),-1);
if(!x475.valid){
continue;
}
if( ((pz*(x475.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x475.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x473=IKasin((pz*(x475.value)));
j1array[0]=((((-1.0)*x472))+(((-1.0)*x473)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x472))+x473);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[3];
IkReal x476=((1415.0)*sj2);
IkReal x477=((99.0)*cj2);
IkReal x478=((10000.0)*pz*sj1);
IkReal x479=((480.0)*cj2*sj3);
IkReal x480=((480.0)*cj3*sj2);
IkReal x481=(((cj1*(px*px)))+((cj1*(py*py))));
j0eval[0]=x481;
j0eval[1]=((IKabs((((px*x480))+(((430.0)*px))+((px*x479))+((px*x478))+((px*x477))+((px*x476)))))+(IKabs((((py*x480))+((py*x478))+((py*x479))+((py*x476))+((py*x477))+(((430.0)*py))))));
j0eval[2]=IKsign(x481);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x482=(cj2*py);
IkReal x483=((480.0)*cj3);
IkReal x484=((99.0)*sj2);
IkReal x485=(cj2*px);
IkReal x486=((480.0)*sj2*sj3);
IkReal x487=((10000.0)*cj1*pz);
IkReal x488=(((sj1*(py*py)))+((sj1*(px*px))));
j0eval[0]=x488;
j0eval[1]=IKsign(x488);
j0eval[2]=((IKabs(((((1740.0)*px))+((x483*x485))+(((-1.0)*px*x487))+(((-1.0)*px*x484))+(((-1.0)*px*x486))+(((1415.0)*x485)))))+(IKabs(((((1740.0)*py))+((x482*x483))+(((1415.0)*x482))+(((-1.0)*py*x484))+(((-1.0)*py*x487))+(((-1.0)*py*x486))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x489=px*px;
IkReal x490=py*py;
IkReal x491=((1.0)*cj1);
IkReal x492=((0.086)*cj1);
IkReal x493=(sj1*x489);
IkReal x494=(sj1*x490);
j0eval[0]=((((-1.0)*x489*x491))+(((-1.0)*x490*x491))+(((-4.04651162790698)*x493))+(((-4.04651162790698)*x494)));
j0eval[1]=IKsign(((((-1.0)*x489*x492))+(((-0.348)*x493))+(((-0.348)*x494))+(((-1.0)*x490*x492))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x495=py*py;
IkReal x496=px*px;
IkReal x497=((((-4.04651162790698)*x496))+(((-4.04651162790698)*x495)));
IkReal x498=((((-1.0)*x495))+(((-1.0)*x496)));
IkReal x500 = ((x498*x498)+(x497*x497));
if(IKabs(x500)==0){
continue;
}
IkReal x499=pow(x500,-0.5);
CheckValue<IkReal> x501 = IKatan2WithCheck(IkReal(x498),IkReal(x497),IKFAST_ATAN2_MAGTHRESH);
if(!x501.valid){
continue;
}
IkReal gconst0=((-1.0)*(x501.value));
IkReal gconst1=((-1.0)*x498*x499);
IkReal gconst2=(x497*x499);
IkReal x502=py*py;
IkReal x503=px*px;
IkReal x504=j1;
CheckValue<IkReal> x507 = IKatan2WithCheck(IkReal(((((-1.0)*x502))+(((-1.0)*x503)))),IkReal(((((-4.04651162790698)*x503))+(((-4.04651162790698)*x502)))),IKFAST_ATAN2_MAGTHRESH);
if(!x507.valid){
continue;
}
IkReal x505=x507.value;
IkReal x506=x505;
if(((((j1*x506))+((j1*x504))+((x505*x506))+((x504*x505)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((j1*x506))+((j1*x504))+((x505*x506))+((x504*x505)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x508=(px*sj2);
IkReal x509=(gconst1*pz);
IkReal x510=((0.048)*cj3);
IkReal x511=(py*sj2);
IkReal x512=(cj2*px);
IkReal x513=((0.048)*sj3);
IkReal x514=(cj2*py);
CheckValue<IkReal> x515 = IKatan2WithCheck(IkReal((((x510*x511))+(((0.0099)*x514))+((x513*x514))+(((0.1415)*x511))+(((0.043)*py))+((py*x509)))),IkReal(((((0.1415)*x508))+(((0.0099)*x512))+((x512*x513))+((px*x509))+(((0.043)*px))+((x508*x510)))),IKFAST_ATAN2_MAGTHRESH);
if(!x515.valid){
continue;
}
CheckValue<IkReal> x516=IKPowWithIntegerCheck(IKsign((((gconst2*(py*py)))+((gconst2*(px*px))))),-1);
if(!x516.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x515.value)+(((1.5707963267949)*(x516.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x517=IKsin(j0);
IkReal x518=IKcos(j0);
IkReal x519=((0.1415)*cj2);
IkReal x520=((0.1415)*sj2);
IkReal x521=((0.0099)*cj2);
IkReal x522=((0.086)*gconst2);
IkReal x523=(gconst1*pz);
IkReal x524=((0.0099)*sj2);
IkReal x525=((0.348)*gconst1);
IkReal x526=((1.0)*gconst2);
IkReal x527=(gconst2*pz);
IkReal x528=((0.048)*cj2*sj3);
IkReal x529=(px*x518);
IkReal x530=((0.048)*cj3*sj2);
IkReal x531=(py*x517);
IkReal x532=((0.048)*cj2*cj3);
IkReal x533=((0.048)*sj2*sj3);
evalcond[0]=(((px*x517))+(((-1.0)*py*x518)));
evalcond[1]=((-0.174)+(((-1.0)*x532))+((gconst1*x531))+x533+x527+x524+((gconst1*x529))+(((-1.0)*x519)));
evalcond[2]=((0.043)+(((-1.0)*x526*x531))+(((-1.0)*x526*x529))+x530+x523+x520+x521+x528);
evalcond[3]=((((0.043)*gconst2))+(((-1.0)*x531))+(((-1.0)*x529))+((gconst2*x530))+((gconst2*x528))+((gconst2*x521))+((gconst2*x520))+((gconst1*x519))+(((0.174)*gconst1))+((gconst1*x532))+(((-1.0)*gconst1*x533))+(((-1.0)*gconst1*x524)));
evalcond[4]=((-0.00970074)+((x522*x529))+((x522*x531))+(((-1.0)*(px*px)))+(((0.013584)*cj3))+((x525*x529))+((x525*x531))+(((-1.0)*(pz*pz)))+(((-0.086)*x523))+(((-1.0)*(py*py)))+(((0.348)*x527))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x534=py*py;
IkReal x535=px*px;
IkReal x536=((((-4.04651162790698)*x535))+(((-4.04651162790698)*x534)));
IkReal x537=((((-1.0)*x535))+(((-1.0)*x534)));
IkReal x539 = ((x537*x537)+(x536*x536));
if(IKabs(x539)==0){
continue;
}
IkReal x538=pow(x539,-0.5);
CheckValue<IkReal> x540 = IKatan2WithCheck(IkReal(x537),IkReal(x536),IKFAST_ATAN2_MAGTHRESH);
if(!x540.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x540.value))));
IkReal gconst4=((1.0)*x537*x538);
IkReal gconst5=((-1.0)*x536*x538);
IkReal x541=py*py;
IkReal x542=px*px;
IkReal x543=j1;
CheckValue<IkReal> x546 = IKatan2WithCheck(IkReal(((((-1.0)*x541))+(((-1.0)*x542)))),IkReal(((((-4.04651162790698)*x542))+(((-4.04651162790698)*x541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x546.valid){
continue;
}
IkReal x544=x546.value;
IkReal x545=x544;
if((((9.86960440108936)+((x544*x545))+(((-3.14159265358979)*x544))+(((-3.14159265358979)*x545))+(((-3.14159265358979)*x543))+((x543*x544))+(((-3.14159265358979)*j1))+((j1*x543))+((j1*x545)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((x544*x545))+(((-3.14159265358979)*x544))+(((-3.14159265358979)*x545))+(((-3.14159265358979)*x543))+((x543*x544))+(((-3.14159265358979)*j1))+((j1*x543))+((j1*x545)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x547=(px*sj2);
IkReal x548=((0.048)*cj3);
IkReal x549=(py*sj2);
IkReal x550=(cj2*px);
IkReal x551=((0.048)*sj3);
IkReal x552=(gconst4*pz);
IkReal x553=(cj2*py);
CheckValue<IkReal> x554 = IKatan2WithCheck(IkReal((((py*x552))+(((0.1415)*x549))+(((0.0099)*x553))+((x551*x553))+(((0.043)*py))+((x548*x549)))),IkReal((((x547*x548))+((px*x552))+(((0.1415)*x547))+(((0.0099)*x550))+((x550*x551))+(((0.043)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x554.valid){
continue;
}
CheckValue<IkReal> x555=IKPowWithIntegerCheck(IKsign((((gconst5*(px*px)))+((gconst5*(py*py))))),-1);
if(!x555.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x554.value)+(((1.5707963267949)*(x555.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x556=IKsin(j0);
IkReal x557=IKcos(j0);
IkReal x558=((0.048)*sj3);
IkReal x559=((0.1415)*sj2);
IkReal x560=(gconst4*sj2);
IkReal x561=((0.348)*gconst4);
IkReal x562=((0.1415)*cj2);
IkReal x563=((0.086)*gconst5);
IkReal x564=((0.0099)*cj2);
IkReal x565=(gconst4*pz);
IkReal x566=((1.0)*gconst5);
IkReal x567=(gconst5*pz);
IkReal x568=(px*x557);
IkReal x569=((0.048)*cj3*sj2);
IkReal x570=(py*x556);
IkReal x571=((0.048)*cj2*cj3);
evalcond[0]=((((-1.0)*py*x557))+((px*x556)));
evalcond[1]=((-0.174)+((gconst4*x568))+(((0.0099)*sj2))+((sj2*x558))+(((-1.0)*x571))+x567+((gconst4*x570))+(((-1.0)*x562)));
evalcond[2]=((0.043)+(((-1.0)*x566*x570))+(((-1.0)*x566*x568))+x559+x569+x564+x565+((cj2*x558)));
evalcond[3]=(((gconst5*x564))+((gconst5*x569))+((gconst4*x562))+(((0.043)*gconst5))+(((-1.0)*x558*x560))+((gconst5*x559))+(((-1.0)*x570))+(((0.174)*gconst4))+(((-1.0)*x568))+(((-0.0099)*x560))+((cj2*gconst5*x558))+((gconst4*x571)));
evalcond[4]=((-0.00970074)+((x561*x570))+(((-1.0)*(px*px)))+(((0.348)*x567))+((x563*x570))+(((-0.086)*x565))+((x563*x568))+((x561*x568))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x572=(px*sj2);
IkReal x573=((480.0)*cj3);
IkReal x574=(py*sj2);
IkReal x575=((99.0)*cj2);
IkReal x576=((480.0)*cj2*sj3);
IkReal x577=((px*px)+(py*py));
j0eval[0]=x577;
j0eval[1]=((IKabs((((px*x575))+((px*x576))+(((1415.0)*x572))+(((430.0)*px))+((x572*x573)))))+(IKabs((((py*x576))+((py*x575))+((x573*x574))+(((1415.0)*x574))+(((430.0)*py))))));
j0eval[2]=IKsign(x577);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x578=py*py;
IkReal x579=px*px;
IkReal x580=pz*pz;
IkReal x581=((679200.0)*cj3);
IkReal x582=((47520.0)*sj3);
IkReal x583=((17400000.0)*pz);
IkReal x584=((50000000.0)*x580);
j0eval[0]=((((-1.0)*x579))+(((-1.0)*x578)));
j0eval[1]=IKsign(((((-43.0)*x578))+(((-43.0)*x579))));
j0eval[2]=((IKabs((((px*x581))+((px*x583))+((px*x582))+(((-50000000.0)*(px*px*px)))+(((-1.0)*px*x584))+(((-485037.0)*px))+(((-50000000.0)*px*x578)))))+(IKabs(((((-1.0)*py*x584))+(((-50000000.0)*(py*py*py)))+(((-50000000.0)*py*x579))+(((-485037.0)*py))+((py*x581))+((py*x582))+((py*x583))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x585=pz*pz;
IkReal x586=py*py;
IkReal x587=px*px;
IkReal x588=((0.4752)*sj3);
IkReal x589=((6.792)*cj3);
IkReal x590=((174.0)*pz);
IkReal x591=((500.0)*x585);
CheckValue<IkReal> x592 = IKatan2WithCheck(IkReal((((py*x590))+(((-4.85037)*py))+(((-1.0)*py*x591))+(((-500.0)*(py*py*py)))+((py*x588))+((py*x589))+(((-500.0)*py*x587)))),IkReal((((px*x589))+((px*x588))+(((-1.0)*px*x591))+(((-4.85037)*px))+(((-500.0)*px*x586))+((px*x590))+(((-500.0)*(px*px*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x592.valid){
continue;
}
CheckValue<IkReal> x593=IKPowWithIntegerCheck(IKsign(((((-43.0)*x587))+(((-43.0)*x586)))),-1);
if(!x593.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x592.value)+(((1.5707963267949)*(x593.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x594=IKcos(j0);
IkReal x595=IKsin(j0);
IkReal x596=((1.0)*x594);
IkReal x597=(py*x595);
evalcond[0]=((((-1.0)*py*x596))+((px*x595)));
evalcond[1]=((0.043)+(((0.1415)*sj2))+(((-1.0)*px*x596))+(((-1.0)*x597))+(((0.048)*cj3*sj2))+(((0.0099)*cj2))+(((0.048)*cj2*sj3)));
evalcond[2]=((-0.00970074)+(((-1.0)*(px*px)))+(((0.348)*pz))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.086)*x597))+(((0.0009504)*sj3))+(((0.086)*px*x594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x598=(px*sj2);
IkReal x599=((0.048)*cj3);
IkReal x600=(py*sj2);
IkReal x601=(cj2*px);
IkReal x602=((0.048)*sj3);
IkReal x603=(cj2*py);
CheckValue<IkReal> x604 = IKatan2WithCheck(IkReal(((((0.1415)*x600))+(((0.0099)*x603))+((x599*x600))+((x602*x603))+(((0.043)*py)))),IkReal((((x601*x602))+((x598*x599))+(((0.1415)*x598))+(((0.0099)*x601))+(((0.043)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x604.valid){
continue;
}
CheckValue<IkReal> x605=IKPowWithIntegerCheck(IKsign(((px*px)+(py*py))),-1);
if(!x605.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x604.value)+(((1.5707963267949)*(x605.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x606=IKcos(j0);
IkReal x607=IKsin(j0);
IkReal x608=((1.0)*x606);
IkReal x609=(py*x607);
evalcond[0]=(((px*x607))+(((-1.0)*py*x608)));
evalcond[1]=((0.043)+(((0.1415)*sj2))+(((-1.0)*x609))+(((0.048)*cj3*sj2))+(((0.0099)*cj2))+(((0.048)*cj2*sj3))+(((-1.0)*px*x608)));
evalcond[2]=((-0.00970074)+(((0.086)*x609))+(((-1.0)*(px*px)))+(((0.348)*pz))+(((0.013584)*cj3))+(((0.086)*px*x606))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x610=(px*sj2);
IkReal x611=((480.0)*cj3);
IkReal x612=(py*sj2);
IkReal x613=((99.0)*cj2);
IkReal x614=((480.0)*cj2*sj3);
IkReal x615=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
j0eval[0]=x615;
j0eval[1]=((IKabs((((x611*x612))+(((1415.0)*x612))+((py*x614))+((py*x613))+(((430.0)*py)))))+(IKabs((((px*x613))+((px*x614))+(((1415.0)*x610))+((x610*x611))+(((430.0)*px))))));
j0eval[2]=IKsign(x615);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x616=py*py;
IkReal x617=px*px;
IkReal x618=pz*pz;
IkReal x619=((679200.0)*cj3);
IkReal x620=((47520.0)*sj3);
IkReal x621=((17400000.0)*pz);
IkReal x622=((50000000.0)*x618);
j0eval[0]=(x616+x617);
j0eval[1]=IKsign(((((43.0)*x617))+(((43.0)*x616))));
j0eval[2]=((IKabs((((py*x620))+(((-50000000.0)*(py*py*py)))+(((-50000000.0)*py*x617))+((py*x619))+(((-485037.0)*py))+(((-1.0)*py*x622))+(((-1.0)*py*x621)))))+(IKabs(((((-50000000.0)*(px*px*px)))+((px*x619))+(((-50000000.0)*px*x616))+(((-485037.0)*px))+(((-1.0)*px*x621))+(((-1.0)*px*x622))+((px*x620))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x623=pz*pz;
IkReal x624=py*py;
IkReal x625=px*px;
IkReal x626=((0.4752)*sj3);
IkReal x627=((6.792)*cj3);
IkReal x628=((174.0)*pz);
IkReal x629=((500.0)*x623);
CheckValue<IkReal> x630 = IKatan2WithCheck(IkReal((((py*x626))+((py*x627))+(((-500.0)*py*x625))+(((-4.85037)*py))+(((-500.0)*(py*py*py)))+(((-1.0)*py*x628))+(((-1.0)*py*x629)))),IkReal(((((-4.85037)*px))+(((-500.0)*px*x624))+(((-1.0)*px*x629))+(((-1.0)*px*x628))+(((-500.0)*(px*px*px)))+((px*x626))+((px*x627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x630.valid){
continue;
}
CheckValue<IkReal> x631=IKPowWithIntegerCheck(IKsign(((((43.0)*x624))+(((43.0)*x625)))),-1);
if(!x631.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x630.value)+(((1.5707963267949)*(x631.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x632=IKsin(j0);
IkReal x633=IKcos(j0);
IkReal x634=(px*x633);
IkReal x635=(py*x632);
evalcond[0]=((((-1.0)*py*x633))+((px*x632)));
evalcond[1]=((0.043)+(((0.1415)*sj2))+(((0.048)*cj3*sj2))+x634+x635+(((0.0099)*cj2))+(((0.048)*cj2*sj3)));
evalcond[2]=((-0.00970074)+(((-1.0)*(px*px)))+(((-0.086)*x635))+(((-0.086)*x634))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-0.348)*pz))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x636=(px*sj2);
IkReal x637=((0.048)*cj3);
IkReal x638=(py*sj2);
IkReal x639=(cj2*px);
IkReal x640=((0.048)*sj3);
IkReal x641=(cj2*py);
CheckValue<IkReal> x642 = IKatan2WithCheck(IkReal((((x640*x641))+(((0.1415)*x638))+(((0.043)*py))+(((0.0099)*x641))+((x637*x638)))),IkReal(((((0.0099)*x639))+((x639*x640))+((x636*x637))+(((0.1415)*x636))+(((0.043)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x642.valid){
continue;
}
CheckValue<IkReal> x643=IKPowWithIntegerCheck(IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py))))),-1);
if(!x643.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x642.value)+(((1.5707963267949)*(x643.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x644=IKsin(j0);
IkReal x645=IKcos(j0);
IkReal x646=(px*x645);
IkReal x647=(py*x644);
evalcond[0]=((((-1.0)*py*x645))+((px*x644)));
evalcond[1]=((0.043)+(((0.1415)*sj2))+(((0.048)*cj3*sj2))+x647+x646+(((0.0099)*cj2))+(((0.048)*cj2*sj3)));
evalcond[2]=((-0.00970074)+(((-1.0)*(px*px)))+(((-0.086)*x646))+(((-0.086)*x647))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-0.348)*pz))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x648=(cj2*py);
IkReal x649=((480.0)*cj3);
IkReal x650=((99.0)*sj2);
IkReal x651=(cj2*px);
IkReal x652=((480.0)*sj2*sj3);
IkReal x653=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
j0eval[0]=x653;
j0eval[1]=((IKabs((((py*x650))+((py*x652))+(((-1.0)*x648*x649))+(((-1740.0)*py))+(((-1415.0)*x648)))))+(IKabs(((((-1415.0)*x651))+((px*x650))+((px*x652))+(((-1740.0)*px))+(((-1.0)*x649*x651))))));
j0eval[2]=IKsign(x653);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x654=py*py;
IkReal x655=px*px;
IkReal x656=pz*pz;
IkReal x657=((679200.0)*cj3);
IkReal x658=((4300000.0)*pz);
IkReal x659=((47520.0)*sj3);
IkReal x660=((50000000.0)*x656);
j0eval[0]=((((-1.0)*x655))+(((-1.0)*x654)));
j0eval[1]=IKsign(((((-87.0)*x654))+(((-87.0)*x655))));
j0eval[2]=((IKabs(((((-50000000.0)*py*x655))+(((-50000000.0)*(py*py*py)))+((py*x659))+((py*x657))+(((-1.0)*py*x660))+(((-485037.0)*py))+(((-1.0)*py*x658)))))+(IKabs(((((-1.0)*px*x658))+(((-50000000.0)*(px*px*px)))+((px*x659))+((px*x657))+(((-485037.0)*px))+(((-1.0)*px*x660))+(((-50000000.0)*px*x654))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x661=pz*pz;
IkReal x662=py*py;
IkReal x663=px*px;
IkReal x664=((0.2376)*sj3);
IkReal x665=((250.0)*py);
IkReal x666=((3.396)*cj3);
IkReal x667=((21.5)*pz);
IkReal x668=((250.0)*px);
CheckValue<IkReal> x669 = IKatan2WithCheck(IkReal(((((-2.425185)*py))+(((-1.0)*x665*(py*py)))+(((-1.0)*x663*x665))+(((-1.0)*x661*x665))+((py*x664))+((py*x666))+(((-1.0)*py*x667)))),IkReal(((((-1.0)*x662*x668))+(((-2.425185)*px))+(((-1.0)*x668*(px*px)))+((px*x666))+((px*x664))+(((-1.0)*x661*x668))+(((-1.0)*px*x667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x669.valid){
continue;
}
CheckValue<IkReal> x670=IKPowWithIntegerCheck(IKsign(((((-87.0)*x663))+(((-87.0)*x662)))),-1);
if(!x670.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x669.value)+(((1.5707963267949)*(x670.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x671=IKsin(j0);
IkReal x672=IKcos(j0);
IkReal x673=(px*x672);
IkReal x674=(py*x671);
evalcond[0]=((((-1.0)*py*x672))+((px*x671)));
evalcond[1]=((-0.174)+(((-0.1415)*cj2))+(((0.0099)*sj2))+(((0.048)*sj2*sj3))+x673+x674+(((-0.048)*cj2*cj3)));
evalcond[2]=((-0.00970074)+(((-0.086)*pz))+(((-1.0)*(px*px)))+(((0.348)*x674))+(((0.348)*x673))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x675=(py*sj2);
IkReal x676=((0.048)*sj3);
IkReal x677=(cj2*px);
IkReal x678=(px*sj2);
IkReal x679=((0.048)*cj3);
IkReal x680=(cj2*py);
CheckValue<IkReal> x681=IKPowWithIntegerCheck(IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py))))),-1);
if(!x681.valid){
continue;
}
CheckValue<IkReal> x682 = IKatan2WithCheck(IkReal(((((0.0099)*x675))+(((-0.1415)*x680))+(((-1.0)*x679*x680))+(((-0.174)*py))+((x675*x676)))),IkReal(((((-0.1415)*x677))+(((0.0099)*x678))+((x676*x678))+(((-0.174)*px))+(((-1.0)*x677*x679)))),IKFAST_ATAN2_MAGTHRESH);
if(!x682.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x681.value)))+(x682.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x683=IKsin(j0);
IkReal x684=IKcos(j0);
IkReal x685=(px*x684);
IkReal x686=(py*x683);
evalcond[0]=(((px*x683))+(((-1.0)*py*x684)));
evalcond[1]=((-0.174)+(((-0.1415)*cj2))+(((0.0099)*sj2))+(((0.048)*sj2*sj3))+x686+x685+(((-0.048)*cj2*cj3)));
evalcond[2]=((-0.00970074)+(((-0.086)*pz))+(((-1.0)*(px*px)))+(((0.348)*x685))+(((0.348)*x686))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x687=(cj2*py);
IkReal x688=((480.0)*cj3);
IkReal x689=((99.0)*sj2);
IkReal x690=(cj2*px);
IkReal x691=((480.0)*sj2*sj3);
IkReal x692=((px*px)+(py*py));
j0eval[0]=x692;
j0eval[1]=((IKabs(((((-1.0)*x687*x688))+((py*x691))+(((-1740.0)*py))+(((-1415.0)*x687))+((py*x689)))))+(IKabs((((px*x689))+(((-1.0)*x688*x690))+((px*x691))+(((-1740.0)*px))+(((-1415.0)*x690))))));
j0eval[2]=IKsign(x692);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x693=px*px;
IkReal x694=py*py;
IkReal x695=pz*pz;
IkReal x696=((50000000.0)*py);
IkReal x697=((679200.0)*cj3);
IkReal x698=((4300000.0)*pz);
IkReal x699=((47520.0)*sj3);
IkReal x700=((50000000.0)*px);
j0eval[0]=(x694+x693);
j0eval[1]=((IKabs(((((-1.0)*x700*(px*px)))+(((-1.0)*x694*x700))+(((-1.0)*x695*x700))+((px*x697))+((px*x699))+((px*x698))+(((-485037.0)*px)))))+(IKabs(((((-1.0)*x696*(py*py)))+(((-1.0)*x693*x696))+((py*x697))+((py*x698))+((py*x699))+(((-1.0)*x695*x696))+(((-485037.0)*py))))));
j0eval[2]=IKsign(((((87.0)*x694))+(((87.0)*x693))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x701=pz*pz;
IkReal x702=py*py;
IkReal x703=px*px;
IkReal x704=((0.2376)*sj3);
IkReal x705=((250.0)*py);
IkReal x706=((3.396)*cj3);
IkReal x707=((21.5)*pz);
IkReal x708=((250.0)*px);
CheckValue<IkReal> x709=IKPowWithIntegerCheck(IKsign(((((87.0)*x702))+(((87.0)*x703)))),-1);
if(!x709.valid){
continue;
}
CheckValue<IkReal> x710 = IKatan2WithCheck(IkReal(((((-1.0)*x705*(py*py)))+(((-2.425185)*py))+(((-1.0)*x703*x705))+((py*x704))+((py*x707))+((py*x706))+(((-1.0)*x701*x705)))),IkReal(((((-2.425185)*px))+(((-1.0)*x702*x708))+((px*x707))+((px*x706))+((px*x704))+(((-1.0)*x701*x708))+(((-1.0)*x708*(px*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x710.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x709.value)))+(x710.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x711=IKcos(j0);
IkReal x712=IKsin(j0);
IkReal x713=((1.0)*x711);
IkReal x714=(py*x712);
evalcond[0]=(((px*x712))+(((-1.0)*py*x713)));
evalcond[1]=((-0.174)+(((-0.1415)*cj2))+(((0.0099)*sj2))+(((-1.0)*x714))+(((0.048)*sj2*sj3))+(((-1.0)*px*x713))+(((-0.048)*cj2*cj3)));
evalcond[2]=((-0.00970074)+(((-1.0)*(px*px)))+(((-0.348)*x714))+(((0.086)*pz))+(((-0.348)*px*x711))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x715=(py*sj2);
IkReal x716=((0.048)*sj3);
IkReal x717=((0.1415)*cj2);
IkReal x718=(px*sj2);
IkReal x719=((0.048)*cj2*cj3);
CheckValue<IkReal> x720 = IKatan2WithCheck(IkReal((((x715*x716))+(((0.0099)*x715))+(((-0.174)*py))+(((-1.0)*py*x719))+(((-1.0)*py*x717)))),IkReal(((((0.0099)*x718))+(((-1.0)*px*x719))+(((-1.0)*px*x717))+((x716*x718))+(((-0.174)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x720.valid){
continue;
}
CheckValue<IkReal> x721=IKPowWithIntegerCheck(IKsign(((px*px)+(py*py))),-1);
if(!x721.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x720.value)+(((1.5707963267949)*(x721.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x722=IKcos(j0);
IkReal x723=IKsin(j0);
IkReal x724=((1.0)*x722);
IkReal x725=(py*x723);
evalcond[0]=(((px*x723))+(((-1.0)*py*x724)));
evalcond[1]=((-0.174)+(((-0.1415)*cj2))+(((0.0099)*sj2))+(((-1.0)*px*x724))+(((0.048)*sj2*sj3))+(((-1.0)*x725))+(((-0.048)*cj2*cj3)));
evalcond[2]=((-0.00970074)+(((-1.0)*(px*px)))+(((-0.348)*x725))+(((0.086)*pz))+(((0.013584)*cj3))+(((-0.348)*px*x722))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x726=pz*pz;
IkReal x727=px*px;
IkReal x728=py*py;
IkReal x729=((0.013584)*cj3);
IkReal x730=((0.086)*cj1);
IkReal x731=(py*pz);
IkReal x732=((0.086)*sj1);
IkReal x733=((0.348)*sj1);
IkReal x734=((0.0009504)*sj3);
IkReal x735=((0.348)*cj1);
IkReal x736=(px*pz);
IkReal x737=((1.0)*x726);
CheckValue<IkReal> x738=IKPowWithIntegerCheck(IKsign(((((-1.0)*x727*x733))+(((-1.0)*x727*x730))+(((-1.0)*x728*x730))+(((-1.0)*x728*x733)))),-1);
if(!x738.valid){
continue;
}
CheckValue<IkReal> x739 = IKatan2WithCheck(IkReal(((((-1.0)*(py*py*py)))+(((-0.00970074)*py))+((x731*x735))+(((-1.0)*x731*x732))+((py*x729))+(((-1.0)*py*x727))+((py*x734))+(((-1.0)*py*x737)))),IkReal(((((-0.00970074)*px))+(((-1.0)*x732*x736))+((x735*x736))+(((-1.0)*px*x737))+(((-1.0)*(px*px*px)))+((px*x734))+((px*x729))+(((-1.0)*px*x728)))),IKFAST_ATAN2_MAGTHRESH);
if(!x739.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x738.value)))+(x739.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x740=IKcos(j0);
IkReal x741=IKsin(j0);
IkReal x742=((0.048)*sj3);
IkReal x743=(cj1*cj2);
IkReal x744=((0.1415)*sj2);
IkReal x745=((0.1415)*cj2);
IkReal x746=(sj1*sj2);
IkReal x747=(pz*sj1);
IkReal x748=((0.086)*cj1);
IkReal x749=(cj1*pz);
IkReal x750=((0.348)*sj1);
IkReal x751=((0.048)*cj3*sj2);
IkReal x752=(py*x741);
IkReal x753=((0.048)*cj2*cj3);
IkReal x754=(px*x740);
IkReal x755=((1.0)*x754);
evalcond[0]=((((-1.0)*py*x740))+((px*x741)));
evalcond[1]=((-0.174)+(((0.0099)*sj2))+((sj1*x752))+((sj1*x754))+((sj2*x742))+x749+(((-1.0)*x745))+(((-1.0)*x753)));
evalcond[2]=((0.043)+((cj2*x742))+(((-1.0)*cj1*x752))+(((0.0099)*cj2))+(((-1.0)*cj1*x755))+x751+x747+x744);
evalcond[3]=((((0.174)*sj1))+((x742*x743))+(((0.0099)*x743))+((cj1*x751))+((cj1*x744))+(((-1.0)*x742*x746))+(((0.043)*cj1))+((sj1*x753))+((sj1*x745))+(((-1.0)*x752))+(((-0.0099)*x746))+(((-1.0)*x755)));
evalcond[4]=((-0.00970074)+(((-1.0)*(px*px)))+(((-0.086)*x747))+(((0.013584)*cj3))+(((0.348)*x749))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+((x750*x754))+((x750*x752))+((x748*x752))+((x748*x754))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x756=((0.0099)*sj2);
IkReal x757=((0.048)*py);
IkReal x758=(cj2*cj3);
IkReal x759=((0.1415)*cj2);
IkReal x760=(sj2*sj3);
IkReal x761=((0.048)*px);
IkReal x762=((1.0)*cj1*pz);
CheckValue<IkReal> x763=IKPowWithIntegerCheck(IKsign((((sj1*(py*py)))+((sj1*(px*px))))),-1);
if(!x763.valid){
continue;
}
CheckValue<IkReal> x764 = IKatan2WithCheck(IkReal(((((-1.0)*py*x762))+(((0.174)*py))+((py*x759))+(((-1.0)*x757*x760))+(((-1.0)*py*x756))+((x757*x758)))),IkReal(((((0.174)*px))+(((-1.0)*px*x756))+((px*x759))+(((-1.0)*px*x762))+((x758*x761))+(((-1.0)*x760*x761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x764.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x763.value)))+(x764.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x765=IKcos(j0);
IkReal x766=IKsin(j0);
IkReal x767=((0.048)*sj3);
IkReal x768=(cj1*cj2);
IkReal x769=((0.1415)*sj2);
IkReal x770=((0.1415)*cj2);
IkReal x771=(sj1*sj2);
IkReal x772=(pz*sj1);
IkReal x773=((0.086)*cj1);
IkReal x774=(cj1*pz);
IkReal x775=((0.348)*sj1);
IkReal x776=((0.048)*cj3*sj2);
IkReal x777=(py*x766);
IkReal x778=((0.048)*cj2*cj3);
IkReal x779=(px*x765);
IkReal x780=((1.0)*x779);
evalcond[0]=(((px*x766))+(((-1.0)*py*x765)));
evalcond[1]=((-0.174)+((sj2*x767))+(((0.0099)*sj2))+((sj1*x779))+((sj1*x777))+x774+(((-1.0)*x770))+(((-1.0)*x778)));
evalcond[2]=((0.043)+((cj2*x767))+(((-1.0)*cj1*x777))+(((-1.0)*cj1*x780))+(((0.0099)*cj2))+x772+x776+x769);
evalcond[3]=((((0.174)*sj1))+((cj1*x769))+(((-1.0)*x780))+((cj1*x776))+(((0.043)*cj1))+(((-1.0)*x767*x771))+((sj1*x778))+((sj1*x770))+(((-0.0099)*x771))+(((0.0099)*x768))+(((-1.0)*x777))+((x767*x768)));
evalcond[4]=((-0.00970074)+(((-1.0)*(px*px)))+(((-0.086)*x772))+((x773*x779))+((x773*x777))+(((0.013584)*cj3))+(((0.348)*x774))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+((x775*x777))+((x775*x779))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x781=(px*sj2);
IkReal x782=(pz*sj1);
IkReal x783=((0.048)*cj3);
IkReal x784=(py*sj2);
IkReal x785=(cj2*px);
IkReal x786=((0.048)*sj3);
IkReal x787=(cj2*py);
CheckValue<IkReal> x788=IKPowWithIntegerCheck(IKsign((((cj1*(px*px)))+((cj1*(py*py))))),-1);
if(!x788.valid){
continue;
}
CheckValue<IkReal> x789 = IKatan2WithCheck(IkReal((((x786*x787))+((x783*x784))+((py*x782))+(((0.0099)*x787))+(((0.1415)*x784))+(((0.043)*py)))),IkReal((((x781*x783))+((x785*x786))+((px*x782))+(((0.0099)*x785))+(((0.1415)*x781))+(((0.043)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x789.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x788.value)))+(x789.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x790=IKcos(j0);
IkReal x791=IKsin(j0);
IkReal x792=((0.048)*sj3);
IkReal x793=(cj1*cj2);
IkReal x794=((0.1415)*sj2);
IkReal x795=((0.1415)*cj2);
IkReal x796=(sj1*sj2);
IkReal x797=(pz*sj1);
IkReal x798=((0.086)*cj1);
IkReal x799=(cj1*pz);
IkReal x800=((0.348)*sj1);
IkReal x801=((0.048)*cj3*sj2);
IkReal x802=(py*x791);
IkReal x803=((0.048)*cj2*cj3);
IkReal x804=(px*x790);
IkReal x805=((1.0)*x804);
evalcond[0]=(((px*x791))+(((-1.0)*py*x790)));
evalcond[1]=((-0.174)+(((-1.0)*x795))+(((0.0099)*sj2))+((sj1*x802))+((sj1*x804))+x799+(((-1.0)*x803))+((sj2*x792)));
evalcond[2]=((0.043)+(((-1.0)*cj1*x805))+(((0.0099)*cj2))+x794+x797+x801+(((-1.0)*cj1*x802))+((cj2*x792)));
evalcond[3]=((((-1.0)*x802))+(((0.174)*sj1))+(((-1.0)*x792*x796))+(((-0.0099)*x796))+((cj1*x794))+((sj1*x795))+((cj1*x801))+(((0.043)*cj1))+((x792*x793))+((sj1*x803))+(((0.0099)*x793))+(((-1.0)*x805)));
evalcond[4]=((-0.00970074)+(((-1.0)*(px*px)))+((x800*x804))+((x800*x802))+(((0.013584)*cj3))+((x798*x802))+((x798*x804))+(((0.348)*x799))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((-0.086)*x797))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x807 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x807.valid){
continue;
}
IkReal x806=x807.value;
j0array[0]=((-1.0)*x806);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x806)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[2];
IkReal x808=py*py;
IkReal x809=cj0*cj0;
IkReal x810=((((-1.0)*x808))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+((x808*x809))+(((-1.0)*x809*(px*px))));
j1eval[0]=x810;
j1eval[1]=IKsign(x810);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x811=((4.84848484848485)*cj3);
IkReal x812=(cj2*pz);
IkReal x813=((4.84848484848485)*sj3);
IkReal x814=((0.048)*cj3);
IkReal x815=(pz*sj2);
IkReal x816=((0.048)*sj3);
IkReal x817=(py*sj0);
IkReal x818=(cj0*px);
IkReal x819=(sj2*x817);
IkReal x820=(sj3*x815);
IkReal x821=(cj2*x817);
IkReal x822=(cj2*x818);
j1eval[0]=((((-14.2929292929293)*sj2*x818))+(((-1.0)*sj2*x811*x818))+(((-1.0)*x811*x819))+(((-1.0)*x813*x822))+(((-1.0)*x813*x821))+(((-4.34343434343434)*x818))+(((-4.34343434343434)*x817))+(((-1.0)*x815))+(((-1.0)*x821))+(((-1.0)*x822))+((x811*x812))+(((14.2929292929293)*x812))+(((-1.0)*x813*x815))+(((-14.2929292929293)*x819))+(((17.5757575757576)*pz)));
j1eval[1]=IKsign(((((-1.0)*x816*x822))+(((-1.0)*x816*x821))+(((0.174)*pz))+(((-0.1415)*x819))+(((-0.1415)*sj2*x818))+(((0.1415)*x812))+((x812*x814))+(((-0.043)*x817))+(((-0.043)*x818))+(((-1.0)*x815*x816))+(((-1.0)*x814*x819))+(((-0.0099)*x822))+(((-0.0099)*x821))+(((-0.0099)*x815))+(((-1.0)*sj2*x814*x818))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x823=((4.84848484848485)*sj2);
IkReal x824=(py*sj0);
IkReal x825=(cj3*pz);
IkReal x826=((14.2929292929293)*cj2);
IkReal x827=((4.84848484848485)*cj3);
IkReal x828=(cj0*px);
IkReal x829=(pz*sj2);
IkReal x830=(cj2*pz);
IkReal x831=((0.048)*sj3);
IkReal x832=((0.0099)*sj2);
IkReal x833=((0.048)*cj3);
IkReal x834=(cj2*x828);
j1eval[0]=((((-1.0)*x827*x834))+(((-4.34343434343434)*pz))+(((-1.0)*x823*x825))+((sj2*x828))+((sj2*x824))+(((-1.0)*x824*x826))+(((-1.0)*x826*x828))+((sj3*x823*x828))+((sj3*x823*x824))+(((-4.84848484848485)*sj3*x830))+(((-1.0)*x830))+(((-14.2929292929293)*x829))+(((-17.5757575757576)*x828))+(((-17.5757575757576)*x824))+(((-1.0)*cj2*x824*x827)));
j1eval[1]=IKsign(((((-0.0099)*x830))+((x824*x832))+((sj2*x828*x831))+(((-0.1415)*x834))+(((-1.0)*x833*x834))+(((-0.1415)*x829))+((sj2*x824*x831))+(((-0.1415)*cj2*x824))+(((-1.0)*x830*x831))+(((-0.174)*x828))+(((-0.174)*x824))+(((-0.043)*pz))+(((-1.0)*cj2*x824*x833))+((x828*x832))+(((-0.048)*sj2*x825))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x835=cj2*cj2;
IkReal x836=cj3*cj3;
IkReal x837=((0.0009504)*cj3);
IkReal x838=(cj2*sj2);
IkReal x839=((0.0009504)*sj3);
IkReal x840=(cj2*cj3);
IkReal x841=(py*sj0);
IkReal x842=((0.0099)*sj2);
IkReal x843=((0.1415)*cj2);
IkReal x844=(cj0*px);
IkReal x845=(sj2*sj3);
IkReal x846=(pz*sj2);
IkReal x847=((0.013584)*sj3);
IkReal x848=((0.013584)*cj3);
IkReal x849=(cj3*sj3);
IkReal x850=(cj2*sj3);
IkReal x851=((1.0)*pz);
IkReal x852=((0.004608)*x836);
CheckValue<IkReal> x853 = IKatan2WithCheck(IkReal(((-0.03267801)+(((-0.049242)*cj2))+((x838*x847))+(((-1.0)*x835*x848))+(((0.002304)*x836))+(((0.016704)*x845))+(((0.004608)*x838*x849))+((x835*x839))+(((-0.016704)*x840))+(((-1.0)*x835*x852))+(pz*pz)+((x837*x838))+(((-1.0)*x839))+(((0.0028017)*x838))+(((-0.01762024)*x835))+(((0.0034452)*sj2)))),IkReal(((-0.00608115)+(((0.002064)*x845))+(((-1.0)*x835*x847))+((x838*x839))+(((-0.008352)*x850))+(((-1.0)*x835*x837))+(((-1.0)*x844*x851))+(((0.002304)*x849))+(((-0.008352)*cj3*sj2))+(((-0.004608)*x835*x849))+(((-0.002064)*x840))+(((-0.0078071)*cj2))+(((-1.0)*x838*x852))+(((-1.0)*x841*x851))+(((-0.0241953)*sj2))+(((-0.0028017)*x835))+(((-0.01762024)*x838))+(((-1.0)*x838*x848))+(((0.006792)*sj3))+(((0.0004752)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x853.valid){
continue;
}
CheckValue<IkReal> x854=IKPowWithIntegerCheck(IKsign(((((-1.0)*x841*x843))+(((-0.048)*pz*x850))+(((-0.1415)*x846))+(((-0.048)*cj3*x846))+(((-1.0)*x843*x844))+((x842*x844))+(((-0.043)*pz))+(((-0.174)*x841))+(((-0.174)*x844))+(((-0.048)*x840*x841))+(((-0.048)*x840*x844))+(((0.048)*x841*x845))+(((-0.0099)*cj2*pz))+(((0.048)*x844*x845))+((x841*x842)))),-1);
if(!x854.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x853.value)+(((1.5707963267949)*(x854.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x855=IKsin(j1);
IkReal x856=IKcos(j1);
IkReal x857=((0.048)*sj3);
IkReal x858=(cj0*px);
IkReal x859=((0.1415)*sj2);
IkReal x860=(py*sj0);
IkReal x861=((0.1415)*cj2);
IkReal x862=((0.0099)*cj2);
IkReal x863=((0.048)*cj3);
IkReal x864=((0.348)*x855);
IkReal x865=(sj2*x855);
IkReal x866=(sj2*x863);
IkReal x867=((1.0)*x856);
IkReal x868=((0.086)*x856);
IkReal x869=(cj2*x855);
IkReal x870=(sj2*x856);
IkReal x871=(pz*x856);
IkReal x872=(pz*x855);
IkReal x873=(cj2*x856);
evalcond[0]=((-0.174)+(((-1.0)*x861))+((x855*x858))+((sj2*x857))+(((0.0099)*sj2))+(((-1.0)*cj2*x863))+((x855*x860))+x871);
evalcond[1]=((0.043)+((cj2*x857))+(((-1.0)*x860*x867))+(((-1.0)*x858*x867))+x859+x866+x862+x872);
evalcond[2]=((-0.00970074)+(((-1.0)*(px*px)))+(((-0.086)*x872))+(((0.348)*x871))+(((0.013584)*cj3))+((x858*x868))+((x858*x864))+(((-1.0)*(pz*pz)))+((x860*x868))+((x860*x864))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)));
evalcond[3]=((((0.0099)*x870))+((x855*x859))+(((0.043)*x855))+(((-0.174)*x856))+((x863*x865))+((x855*x862))+pz+(((-1.0)*x856*x861))+((x857*x869))+((x857*x870))+(((-1.0)*x863*x873)));
evalcond[4]=((((-1.0)*x858))+(((0.043)*x856))+(((0.174)*x855))+((x863*x869))+(((-1.0)*x860))+(((-0.0099)*x865))+((x855*x861))+((x856*x866))+((x856*x862))+((x856*x859))+((x857*x873))+(((-1.0)*x857*x865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x874=cj2*cj2;
IkReal x875=cj3*cj3;
IkReal x876=(pz*sj2);
IkReal x877=((0.048)*sj3);
IkReal x878=(cj2*sj3);
IkReal x879=(py*sj0);
IkReal x880=((0.1415)*sj2);
IkReal x881=((0.0009504)*cj3);
IkReal x882=(cj0*px);
IkReal x883=((0.0099)*cj2);
IkReal x884=(cj2*sj2);
IkReal x885=((0.013584)*cj3);
IkReal x886=(cj3*sj3);
IkReal x887=(cj3*sj2);
IkReal x888=(cj2*pz);
IkReal x889=((0.004608)*x875);
IkReal x890=(sj3*x874);
CheckValue<IkReal> x891 = IKatan2WithCheck(IkReal(((-0.00608115)+(((-0.002064)*cj2*cj3))+((pz*x882))+(((0.002064)*sj2*sj3))+(((0.0009504)*sj2*x878))+(((-0.0078071)*cj2))+(((-0.013584)*x890))+(((0.002304)*x886))+(((-0.0241953)*sj2))+(((-0.004608)*x874*x886))+((pz*x879))+(((0.006792)*sj3))+(((0.0004752)*cj3))+(((-0.01762024)*x884))+(((-1.0)*x874*x881))+(((-0.0028017)*x874))+(((-0.008352)*x887))+(((-1.0)*x884*x889))+(((-1.0)*x884*x885))+(((-0.008352)*x878)))),IkReal(((-0.02187125)+(((0.01762024)*x874))+((x874*x885))+((x874*x889))+(((-0.0009504)*x890))+(((-1.0)*x885))+(((-1.0)*x881*x884))+(((-0.002304)*x875))+(((-0.004128)*x887))+(pz*pz)+(((-0.0028017)*x884))+(((-0.004608)*x878*x887))+(((-0.013584)*sj2*x878))+(((-0.0008514)*cj2))+(((-0.012169)*sj2))+(((-0.004128)*x878)))),IKFAST_ATAN2_MAGTHRESH);
if(!x891.valid){
continue;
}
CheckValue<IkReal> x892=IKPowWithIntegerCheck(IKsign(((((0.174)*pz))+(((-1.0)*x879*x883))+(((-1.0)*x879*x880))+(((-1.0)*x876*x877))+(((0.048)*cj3*x888))+(((-1.0)*x882*x883))+(((-1.0)*cj2*x877*x879))+(((0.1415)*x888))+(((-0.0099)*x876))+(((-0.048)*x879*x887))+(((-0.048)*x882*x887))+(((-0.043)*x882))+(((-1.0)*cj2*x877*x882))+(((-0.043)*x879))+(((-1.0)*x880*x882)))),-1);
if(!x892.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x891.value)+(((1.5707963267949)*(x892.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x893=IKsin(j1);
IkReal x894=IKcos(j1);
IkReal x895=((0.048)*sj3);
IkReal x896=(cj0*px);
IkReal x897=((0.1415)*sj2);
IkReal x898=(py*sj0);
IkReal x899=((0.1415)*cj2);
IkReal x900=((0.0099)*cj2);
IkReal x901=((0.048)*cj3);
IkReal x902=((0.348)*x893);
IkReal x903=(sj2*x893);
IkReal x904=(sj2*x901);
IkReal x905=((1.0)*x894);
IkReal x906=((0.086)*x894);
IkReal x907=(cj2*x893);
IkReal x908=(sj2*x894);
IkReal x909=(pz*x894);
IkReal x910=(pz*x893);
IkReal x911=(cj2*x894);
evalcond[0]=((-0.174)+(((0.0099)*sj2))+(((-1.0)*x899))+((sj2*x895))+((x893*x896))+((x893*x898))+x909+(((-1.0)*cj2*x901)));
evalcond[1]=((0.043)+((cj2*x895))+(((-1.0)*x896*x905))+(((-1.0)*x898*x905))+x897+x910+x904+x900);
evalcond[2]=((-0.00970074)+(((-1.0)*(px*px)))+(((-0.086)*x910))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+((x896*x902))+((x896*x906))+(((0.348)*x909))+((x898*x906))+((x898*x902))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)));
evalcond[3]=(((x895*x908))+((x895*x907))+((x901*x903))+(((0.0099)*x908))+((x893*x900))+((x893*x897))+pz+(((-1.0)*x894*x899))+(((-0.174)*x894))+(((0.043)*x893))+(((-1.0)*x901*x911)));
evalcond[4]=((((0.174)*x893))+((x894*x897))+(((-1.0)*x895*x903))+((x894*x904))+((x894*x900))+((x901*x907))+((x895*x911))+(((-0.0099)*x903))+(((-1.0)*x898))+(((-1.0)*x896))+((x893*x899))+(((0.043)*x894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x912=py*py;
IkReal x913=cj0*cj0;
IkReal x914=(pz*sj2);
IkReal x915=((0.048)*sj3);
IkReal x916=(py*sj0);
IkReal x917=((0.1415)*sj2);
IkReal x918=(cj2*pz);
IkReal x919=((0.048)*cj3);
IkReal x920=(cj0*px);
IkReal x921=((0.0099)*sj2);
IkReal x922=(cj2*x920);
CheckValue<IkReal> x923=IKPowWithIntegerCheck(IKsign(((((-1.0)*x913*(px*px)))+(((-1.0)*x912))+(((-1.0)*(pz*pz)))+((x912*x913))+(((-2.0)*x916*x920)))),-1);
if(!x923.valid){
continue;
}
CheckValue<IkReal> x924 = IKatan2WithCheck(IkReal((((x916*x921))+((x920*x921))+(((-0.1415)*cj2*x916))+(((-0.174)*x916))+(((-0.1415)*x922))+(((0.1415)*x914))+((x914*x919))+(((-0.174)*x920))+(((0.0099)*x918))+((sj2*x915*x920))+(((-1.0)*x919*x922))+((x915*x918))+((sj2*x915*x916))+(((0.043)*pz))+(((-1.0)*cj2*x916*x919)))),IkReal(((((-1.0)*x918*x919))+(((-0.0099)*x922))+(((-1.0)*cj2*x915*x916))+(((-1.0)*sj2*x919*x920))+(((-0.043)*x920))+((x914*x915))+(((-0.1415)*x918))+(((0.0099)*x914))+(((-1.0)*sj2*x916*x919))+(((-0.0099)*cj2*x916))+(((-1.0)*x915*x922))+(((-0.174)*pz))+(((-0.043)*x916))+(((-1.0)*x917*x920))+(((-1.0)*x916*x917)))),IKFAST_ATAN2_MAGTHRESH);
if(!x924.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x923.value)))+(x924.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x925=IKsin(j1);
IkReal x926=IKcos(j1);
IkReal x927=((0.048)*sj3);
IkReal x928=(cj0*px);
IkReal x929=((0.1415)*sj2);
IkReal x930=(py*sj0);
IkReal x931=((0.1415)*cj2);
IkReal x932=((0.0099)*cj2);
IkReal x933=((0.048)*cj3);
IkReal x934=((0.348)*x925);
IkReal x935=(sj2*x925);
IkReal x936=(sj2*x933);
IkReal x937=((1.0)*x926);
IkReal x938=((0.086)*x926);
IkReal x939=(cj2*x925);
IkReal x940=(sj2*x926);
IkReal x941=(pz*x926);
IkReal x942=(pz*x925);
IkReal x943=(cj2*x926);
evalcond[0]=((-0.174)+(((-1.0)*cj2*x933))+(((0.0099)*sj2))+((x925*x930))+((x925*x928))+x941+((sj2*x927))+(((-1.0)*x931)));
evalcond[1]=((0.043)+(((-1.0)*x930*x937))+(((-1.0)*x928*x937))+((cj2*x927))+x936+x932+x929+x942);
evalcond[2]=((-0.00970074)+(((-1.0)*(px*px)))+((x928*x938))+((x928*x934))+(((0.013584)*cj3))+(((-0.086)*x942))+((x930*x938))+((x930*x934))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.348)*x941))+(((0.0009504)*sj3)));
evalcond[3]=(((x927*x939))+(((-1.0)*x933*x943))+(((-0.174)*x926))+(((-1.0)*x926*x931))+pz+(((0.043)*x925))+((x925*x932))+(((0.0099)*x940))+((x925*x929))+((x927*x940))+((x933*x935)));
evalcond[4]=((((-0.0099)*x935))+(((0.174)*x925))+(((-1.0)*x927*x935))+(((-1.0)*x928))+(((-1.0)*x930))+(((0.043)*x926))+((x925*x931))+((x926*x929))+((x926*x932))+((x926*x936))+((x927*x943))+((x933*x939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x945 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x945.valid){
continue;
}
IkReal x944=x945.value;
j0array[0]=((-1.0)*x944);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x944)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2eval[1];
j2eval[0]=((21.1703072390572)+sj3+(((2.42424242424242)*(sj3*sj3)))+(((2.42424242424242)*(cj3*cj3)))+(((14.2929292929293)*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=((((py*py)*(sj0*sj0)))+(pz*pz)+(((cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x946=(py*sj0);
IkReal x947=(cj0*px);
IkReal x948=((((-0.086)*pz))+(((0.348)*x947))+(((0.348)*x946)));
IkReal x949=((((0.348)*pz))+(((0.086)*x946))+(((0.086)*x947)));
CheckValue<IkReal> x952 = IKatan2WithCheck(IkReal(x949),IkReal(x948),IKFAST_ATAN2_MAGTHRESH);
if(!x952.valid){
continue;
}
IkReal x950=((1.0)*(x952.value));
if((((x949*x949)+(x948*x948))) < -0.00001)
continue;
CheckValue<IkReal> x953=IKPowWithIntegerCheck(IKabs(IKsqrt(((x949*x949)+(x948*x948)))),-1);
if(!x953.valid){
continue;
}
if( (((x953.value)*(((-0.00970074)+(((-1.0)*(px*px)))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)))))) < -1-IKFAST_SINCOS_THRESH || (((x953.value)*(((-0.00970074)+(((-1.0)*(px*px)))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x951=IKasin(((x953.value)*(((-0.00970074)+(((-1.0)*(px*px)))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0009504)*sj3))))));
j1array[0]=((((-1.0)*x951))+(((-1.0)*x950)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x950))+x951);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j2eval[2];
j2eval[0]=((-23.5945496632997)+(((-1.0)*sj3))+(((-14.2929292929293)*cj3)));
j2eval[1]=IKsign(((-0.02242426)+(((-0.0009504)*sj3))+(((-0.013584)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x954=(cj1*sj3);
IkReal x955=(cj1*cj3);
j2eval[0]=((((23.5945496632997)*cj1))+x954+(((14.2929292929293)*x955)));
j2eval[1]=IKsign(((((0.013584)*x955))+(((0.02242426)*cj1))+(((0.0009504)*x954))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x956=(cj3*sj1);
IkReal x957=(sj1*sj3);
j2eval[0]=((((-14.2929292929293)*x956))+(((-1.0)*x957))+(((-23.5945496632997)*sj1)));
j2eval[1]=IKsign(((((-0.0009504)*x957))+(((-0.02242426)*sj1))+(((-0.013584)*x956))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj1=0;
cj1=1.0;
j1=0;
j2eval[0]=((-23.5945496632997)+(((-1.0)*sj3))+(((-14.2929292929293)*cj3)));
j2eval[1]=IKsign(((-0.02242426)+(((-0.0009504)*sj3))+(((-0.013584)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x958=(cj0*px);
IkReal x959=((0.048)*cj3);
IkReal x960=((0.048)*sj3);
IkReal x961=(py*sj0);
CheckValue<IkReal> x962=IKPowWithIntegerCheck(IKsign(((-0.02242426)+(((-0.0009504)*sj3))+(((-0.013584)*cj3)))),-1);
if(!x962.valid){
continue;
}
CheckValue<IkReal> x963 = IKatan2WithCheck(IkReal(((0.0043619)+(((-0.1415)*x958))+(((-0.1415)*x961))+(((-0.008352)*sj3))+(((0.0099)*pz))+((pz*x960))+(((0.002064)*cj3))+(((-1.0)*x959*x961))+(((-1.0)*x958*x959)))),IkReal(((0.0250467)+(((-1.0)*x960*x961))+(((-1.0)*pz*x959))+(((0.002064)*sj3))+(((-1.0)*x958*x960))+(((-0.1415)*pz))+(((0.008352)*cj3))+(((-0.0099)*x958))+(((-0.0099)*x961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x963.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x962.value)))+(x963.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x964=IKsin(j2);
IkReal x965=IKcos(j2);
IkReal x966=(cj3*x965);
IkReal x967=(sj3*x964);
IkReal x968=(sj3*x965);
IkReal x969=(cj3*x964);
evalcond[0]=((-0.174)+(((-0.1415)*x965))+pz+(((0.048)*x967))+(((-0.048)*x966))+(((0.0099)*x964)));
evalcond[1]=((0.043)+(((-1.0)*py*sj0))+(((0.048)*x968))+(((0.048)*x969))+(((-1.0)*cj0*px))+(((0.1415)*x964))+(((0.0099)*x965)));
evalcond[2]=((0.05454926)+(((-1.0)*(px*px)))+(((0.0087238)*x964))+(((0.0500934)*x965))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((0.004128)*x969))+(((0.004128)*x968))+(((0.016704)*x966))+(((-1.0)*(py*py)))+(((-0.016704)*x967))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2eval[0]=((-23.5945496632997)+(((-1.0)*sj3))+(((-14.2929292929293)*cj3)));
j2eval[1]=IKsign(((-0.02242426)+(((-0.0009504)*sj3))+(((-0.013584)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x970=((0.048)*cj3);
IkReal x971=(cj0*px);
IkReal x972=(py*sj0);
IkReal x973=((0.048)*sj3);
CheckValue<IkReal> x974 = IKatan2WithCheck(IkReal(((0.0043619)+(((-0.008352)*sj3))+(((-1.0)*pz*x973))+(((0.002064)*cj3))+(((0.1415)*x971))+(((0.1415)*x972))+(((-0.0099)*pz))+((x970*x972))+((x970*x971)))),IkReal(((0.0250467)+(((0.0099)*x971))+(((0.0099)*x972))+(((0.002064)*sj3))+(((0.1415)*pz))+((pz*x970))+((x971*x973))+(((0.008352)*cj3))+((x972*x973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x974.valid){
continue;
}
CheckValue<IkReal> x975=IKPowWithIntegerCheck(IKsign(((-0.02242426)+(((-0.0009504)*sj3))+(((-0.013584)*cj3)))),-1);
if(!x975.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x974.value)+(((1.5707963267949)*(x975.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x976=IKsin(j2);
IkReal x977=IKcos(j2);
IkReal x978=((0.048)*sj3);
IkReal x979=(cj3*x976);
IkReal x980=(cj3*x977);
evalcond[0]=((-0.174)+(((0.0099)*x976))+((x976*x978))+(((-1.0)*pz))+(((-0.048)*x980))+(((-0.1415)*x977)));
evalcond[1]=((0.043)+(((0.048)*x979))+(((0.0099)*x977))+((x977*x978))+(((0.1415)*x976))+((cj0*px))+((py*sj0)));
evalcond[2]=((0.05454926)+(((-1.0)*(px*px)))+(((-0.016704)*sj3*x976))+(((0.0087238)*x976))+(((0.0500934)*x977))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.016704)*x980))+(((0.0009504)*sj3))+(((0.004128)*x979))+(((0.004128)*sj3*x977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=((23.5945496632997)+sj3+(((14.2929292929293)*cj3)));
j2eval[1]=IKsign(((0.02242426)+(((0.013584)*cj3))+(((0.0009504)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x981=((0.048)*cj3);
IkReal x982=(cj0*px);
IkReal x983=((0.048)*sj3);
IkReal x984=(py*sj0);
CheckValue<IkReal> x985 = IKatan2WithCheck(IkReal(((-0.0043619)+(((-0.0099)*x984))+(((-0.0099)*x982))+(((-1.0)*pz*x981))+(((-1.0)*x982*x983))+(((-0.1415)*pz))+(((-0.002064)*cj3))+(((0.008352)*sj3))+(((-1.0)*x983*x984)))),IkReal(((-0.0250467)+((x981*x982))+((x981*x984))+(((-1.0)*pz*x983))+(((-0.008352)*cj3))+(((-0.002064)*sj3))+(((-0.0099)*pz))+(((0.1415)*x984))+(((0.1415)*x982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x985.valid){
continue;
}
CheckValue<IkReal> x986=IKPowWithIntegerCheck(IKsign(((0.02242426)+(((0.013584)*cj3))+(((0.0009504)*sj3)))),-1);
if(!x986.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x985.value)+(((1.5707963267949)*(x986.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x987=IKcos(j2);
IkReal x988=IKsin(j2);
IkReal x989=(cj3*x987);
IkReal x990=(sj3*x988);
IkReal x991=(cj3*x988);
IkReal x992=(sj3*x987);
evalcond[0]=((0.043)+(((0.0099)*x987))+pz+(((0.048)*x992))+(((0.048)*x991))+(((0.1415)*x988)));
evalcond[1]=((-0.174)+(((-0.1415)*x987))+(((0.0099)*x988))+(((0.048)*x990))+(((-0.048)*x989))+((cj0*px))+((py*sj0)));
evalcond[2]=((0.05454926)+(((-1.0)*(px*px)))+(((0.0087238)*x988))+(((-0.016704)*x990))+(((0.0500934)*x987))+(((0.013584)*cj3))+(((0.004128)*x991))+(((0.004128)*x992))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.016704)*x989))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=((23.5945496632997)+sj3+(((14.2929292929293)*cj3)));
j2eval[1]=IKsign(((0.02242426)+(((0.013584)*cj3))+(((0.0009504)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x993=(cj0*px);
IkReal x994=((0.048)*cj3);
IkReal x995=(py*sj0);
IkReal x996=((0.048)*sj3);
CheckValue<IkReal> x997=IKPowWithIntegerCheck(IKsign(((0.02242426)+(((0.013584)*cj3))+(((0.0009504)*sj3)))),-1);
if(!x997.valid){
continue;
}
CheckValue<IkReal> x998 = IKatan2WithCheck(IkReal(((-0.0043619)+((x993*x996))+(((0.0099)*x993))+(((0.0099)*x995))+((pz*x994))+(((0.1415)*pz))+(((-0.002064)*cj3))+((x995*x996))+(((0.008352)*sj3)))),IkReal(((-0.0250467)+(((-1.0)*x994*x995))+((pz*x996))+(((-0.008352)*cj3))+(((0.0099)*pz))+(((-0.002064)*sj3))+(((-0.1415)*x993))+(((-0.1415)*x995))+(((-1.0)*x993*x994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x998.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x997.value)))+(x998.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x999=IKcos(j2);
IkReal x1000=IKsin(j2);
IkReal x1001=((0.048)*sj3);
IkReal x1002=(cj3*x1000);
IkReal x1003=(cj3*x999);
evalcond[0]=((0.043)+(((0.0099)*x999))+(((-1.0)*pz))+((x1001*x999))+(((0.1415)*x1000))+(((0.048)*x1002)));
evalcond[1]=((-0.174)+((x1000*x1001))+(((0.0099)*x1000))+(((-0.048)*x1003))+(((-1.0)*py*sj0))+(((-0.1415)*x999))+(((-1.0)*cj0*px)));
evalcond[2]=((0.05454926)+(((0.016704)*x1003))+(((-1.0)*(px*px)))+(((0.004128)*x1002))+(((0.004128)*sj3*x999))+(((0.013584)*cj3))+(((-0.016704)*sj3*x1000))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0087238)*x1000))+(((0.0500934)*x999))+(((0.0009504)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1004=cj1*cj1;
IkReal x1005=((0.048)*pz);
IkReal x1006=(cj1*sj1);
IkReal x1007=(py*sj0);
IkReal x1008=((0.048)*sj3);
IkReal x1009=((0.008352)*sj1);
IkReal x1010=((0.1415)*pz);
IkReal x1011=(cj0*px);
IkReal x1012=(cj3*sj1);
IkReal x1013=((0.048)*cj3);
IkReal x1014=((0.0099)*pz);
IkReal x1015=(sj1*sj3);
IkReal x1016=((0.0099)*x1004);
IkReal x1017=((0.1415)*x1004);
CheckValue<IkReal> x1018 = IKatan2WithCheck(IkReal((((cj3*x1005))+(((-0.1415)*x1006*x1011))+(((-1.0)*x1011*x1016))+x1010+(((-1.0)*x1004*x1008*x1011))+(((-1.0)*x1004*x1010))+(((-0.1415)*x1006*x1007))+(((0.002064)*x1012))+(((0.0099)*x1007))+(((0.0099)*x1011))+(((0.0043619)*sj1))+((x1006*x1014))+(((-1.0)*sj3*x1009))+(((-1.0)*x1006*x1011*x1013))+(((-1.0)*x1006*x1007*x1013))+(((-1.0)*cj3*x1004*x1005))+((x1007*x1008))+(((-1.0)*x1004*x1007*x1008))+((sj3*x1005*x1006))+(((-1.0)*x1007*x1016))+((x1008*x1011)))),IkReal((((cj3*x1009))+(((-1.0)*x1011*x1013))+x1014+(((-1.0)*x1006*x1008*x1011))+(((-1.0)*sj3*x1004*x1005))+(((-1.0)*x1004*x1014))+(((-0.0099)*x1006*x1007))+(((0.002064)*x1015))+(((-1.0)*x1006*x1010))+(((-0.0099)*x1006*x1011))+(((-0.1415)*x1011))+((sj3*x1005))+((x1004*x1011*x1013))+(((-0.1415)*x1007))+(((0.0250467)*sj1))+(((-1.0)*x1007*x1013))+(((-1.0)*cj3*x1005*x1006))+((x1007*x1017))+((x1011*x1017))+(((-1.0)*x1006*x1007*x1008))+((x1004*x1007*x1013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1018.valid){
continue;
}
CheckValue<IkReal> x1019=IKPowWithIntegerCheck(IKsign(((((-0.013584)*x1012))+(((-0.0009504)*x1015))+(((-0.02242426)*sj1)))),-1);
if(!x1019.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1018.value)+(((1.5707963267949)*(x1019.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1020=IKsin(j2);
IkReal x1021=IKcos(j2);
IkReal x1022=(cj0*px);
IkReal x1023=((0.048)*cj3);
IkReal x1024=((0.048)*sj3);
IkReal x1025=(py*sj0);
IkReal x1026=((1.0)*cj1);
IkReal x1027=(sj1*x1020);
IkReal x1028=((0.0099)*x1020);
IkReal x1029=((0.1415)*x1021);
IkReal x1030=((0.0099)*x1021);
IkReal x1031=(cj1*x1020);
IkReal x1032=(sj1*x1021);
IkReal x1033=(cj1*x1021);
evalcond[0]=((-0.174)+((sj1*x1022))+((sj1*x1025))+x1028+(((-1.0)*x1021*x1023))+(((-1.0)*x1029))+((cj1*pz))+((x1020*x1024)));
evalcond[1]=((0.043)+x1030+(((-1.0)*x1022*x1026))+((x1021*x1024))+((x1020*x1023))+(((0.1415)*x1020))+((pz*sj1))+(((-1.0)*x1025*x1026)));
evalcond[2]=((0.05454926)+(((0.016704)*cj3*x1021))+(((-1.0)*(px*px)))+(((0.0087238)*x1020))+(((0.004128)*sj3*x1021))+(((0.013584)*cj3))+(((-0.016704)*sj3*x1020))+(((-1.0)*(pz*pz)))+(((0.0500934)*x1021))+(((-1.0)*(py*py)))+(((0.004128)*cj3*x1020))+(((0.0009504)*sj3)));
evalcond[3]=((((-1.0)*x1023*x1033))+((sj1*x1030))+((x1023*x1027))+(((0.043)*sj1))+(((-1.0)*cj1*x1029))+pz+((x1024*x1032))+((x1024*x1031))+(((0.1415)*x1027))+(((-0.174)*cj1))+((cj1*x1028)));
evalcond[4]=(((sj1*x1029))+(((0.174)*sj1))+(((-1.0)*x1022))+(((-1.0)*x1025))+(((0.043)*cj1))+(((-0.0099)*x1027))+(((0.1415)*x1031))+((x1023*x1031))+((x1023*x1032))+((x1024*x1033))+((cj1*x1030))+(((-1.0)*x1024*x1027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1034=cj1*cj1;
IkReal x1035=(cj1*cj3);
IkReal x1036=((0.048)*pz);
IkReal x1037=(cj1*sj3);
IkReal x1038=(cj0*px);
IkReal x1039=(py*sj0);
IkReal x1040=((0.048)*sj1);
IkReal x1041=(sj3*x1034);
IkReal x1042=((0.1415)*x1034);
IkReal x1043=((0.0099)*x1034);
IkReal x1044=((0.1415)*cj1*sj1);
IkReal x1045=(cj3*x1034);
IkReal x1046=((0.0099)*cj1*sj1);
CheckValue<IkReal> x1047 = IKatan2WithCheck(IkReal((((x1038*x1042))+(((-1.0)*sj1*x1035*x1036))+(((-1.0)*x1038*x1046))+((x1039*x1042))+(((-1.0)*x1039*x1046))+(((0.048)*x1038*x1045))+(((-1.0)*x1037*x1038*x1040))+(((0.048)*x1039*x1045))+(((-1.0)*pz*x1044))+(((-1.0)*pz*x1043))+(((-0.002064)*x1035))+(((-1.0)*x1037*x1039*x1040))+(((-1.0)*x1036*x1041))+(((0.008352)*x1037))+(((-0.0043619)*cj1)))),IkReal((((x1038*x1043))+((x1038*x1044))+((x1035*x1039*x1040))+((x1039*x1044))+((x1039*x1043))+((x1035*x1038*x1040))+(((0.048)*x1038*x1041))+((pz*x1042))+(((0.048)*x1039*x1041))+(((-1.0)*pz*x1046))+(((-0.002064)*x1037))+((x1036*x1045))+(((-1.0)*sj1*x1036*x1037))+(((-0.008352)*x1035))+(((-0.0250467)*cj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1047.valid){
continue;
}
CheckValue<IkReal> x1048=IKPowWithIntegerCheck(IKsign(((((0.013584)*x1035))+(((0.02242426)*cj1))+(((0.0009504)*x1037)))),-1);
if(!x1048.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1047.value)+(((1.5707963267949)*(x1048.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1049=IKsin(j2);
IkReal x1050=IKcos(j2);
IkReal x1051=(cj0*px);
IkReal x1052=((0.048)*cj3);
IkReal x1053=((0.048)*sj3);
IkReal x1054=(py*sj0);
IkReal x1055=((1.0)*cj1);
IkReal x1056=(sj1*x1049);
IkReal x1057=((0.0099)*x1049);
IkReal x1058=((0.1415)*x1050);
IkReal x1059=((0.0099)*x1050);
IkReal x1060=(cj1*x1049);
IkReal x1061=(sj1*x1050);
IkReal x1062=(cj1*x1050);
evalcond[0]=((-0.174)+(((-1.0)*x1058))+x1057+((sj1*x1054))+((sj1*x1051))+((cj1*pz))+((x1049*x1053))+(((-1.0)*x1050*x1052)));
evalcond[1]=((0.043)+(((0.1415)*x1049))+x1059+((x1050*x1053))+(((-1.0)*x1054*x1055))+((x1049*x1052))+((pz*sj1))+(((-1.0)*x1051*x1055)));
evalcond[2]=((0.05454926)+(((-0.016704)*sj3*x1049))+(((-1.0)*(px*px)))+(((0.0500934)*x1050))+(((0.016704)*cj3*x1050))+(((0.013584)*cj3))+(((0.004128)*cj3*x1049))+(((-1.0)*(pz*pz)))+(((0.004128)*sj3*x1050))+(((0.0087238)*x1049))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)));
evalcond[3]=((((-1.0)*cj1*x1058))+(((0.1415)*x1056))+((x1052*x1056))+((cj1*x1057))+((sj1*x1059))+(((0.043)*sj1))+((x1053*x1061))+((x1053*x1060))+pz+(((-1.0)*x1052*x1062))+(((-0.174)*cj1)));
evalcond[4]=((((0.174)*sj1))+(((0.1415)*x1060))+(((0.043)*cj1))+((cj1*x1059))+((sj1*x1058))+((x1053*x1062))+((x1052*x1060))+((x1052*x1061))+(((-1.0)*x1054))+(((-1.0)*x1051))+(((-1.0)*x1053*x1056))+(((-0.0099)*x1056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1063=((0.0099)*sj1);
IkReal x1064=(py*sj0);
IkReal x1065=((0.1415)*sj1);
IkReal x1066=(cj0*px);
IkReal x1067=((0.048)*pz);
IkReal x1068=(sj1*sj3);
IkReal x1069=((0.1415)*cj1);
IkReal x1070=(cj1*cj3);
IkReal x1071=(cj1*sj3);
IkReal x1072=((0.0099)*cj1);
IkReal x1073=((0.048)*cj3*sj1);
CheckValue<IkReal> x1074=IKPowWithIntegerCheck(IKsign(((-0.02242426)+(((-0.0009504)*sj3))+(((-0.013584)*cj3)))),-1);
if(!x1074.valid){
continue;
}
CheckValue<IkReal> x1075 = IKatan2WithCheck(IkReal(((0.0043619)+(((-0.048)*x1064*x1070))+(((-0.008352)*sj3))+((pz*x1072))+((x1067*x1071))+((pz*x1065))+(((0.048)*x1064*x1068))+((cj3*sj1*x1067))+(((0.002064)*cj3))+(((-1.0)*x1066*x1069))+((x1063*x1066))+((x1063*x1064))+(((0.048)*x1066*x1068))+(((-1.0)*x1064*x1069))+(((-0.048)*x1066*x1070)))),IkReal(((0.0250467)+(((-0.048)*x1064*x1071))+(((0.002064)*sj3))+((pz*x1063))+((x1067*x1068))+(((-1.0)*pz*x1069))+(((-1.0)*x1067*x1070))+(((-1.0)*x1066*x1073))+(((-1.0)*x1066*x1072))+(((-1.0)*x1064*x1065))+(((0.008352)*cj3))+(((-1.0)*x1064*x1073))+(((-1.0)*x1064*x1072))+(((-1.0)*x1065*x1066))+(((-0.048)*x1066*x1071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1075.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1074.value)))+(x1075.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1076=IKsin(j2);
IkReal x1077=IKcos(j2);
IkReal x1078=(cj0*px);
IkReal x1079=((0.048)*cj3);
IkReal x1080=((0.048)*sj3);
IkReal x1081=(py*sj0);
IkReal x1082=((1.0)*cj1);
IkReal x1083=(sj1*x1076);
IkReal x1084=((0.0099)*x1076);
IkReal x1085=((0.1415)*x1077);
IkReal x1086=((0.0099)*x1077);
IkReal x1087=(cj1*x1076);
IkReal x1088=(sj1*x1077);
IkReal x1089=(cj1*x1077);
evalcond[0]=((-0.174)+(((-1.0)*x1077*x1079))+((x1076*x1080))+x1084+((cj1*pz))+((sj1*x1078))+((sj1*x1081))+(((-1.0)*x1085)));
evalcond[1]=((0.043)+x1086+(((0.1415)*x1076))+(((-1.0)*x1078*x1082))+(((-1.0)*x1081*x1082))+((x1076*x1079))+((x1077*x1080))+((pz*sj1)));
evalcond[2]=((0.05454926)+(((0.0500934)*x1077))+(((-1.0)*(px*px)))+(((-0.016704)*sj3*x1076))+(((0.004128)*cj3*x1076))+(((0.013584)*cj3))+(((0.0087238)*x1076))+(((0.016704)*cj3*x1077))+(((-1.0)*(pz*pz)))+(((0.004128)*sj3*x1077))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)));
evalcond[3]=(((x1079*x1083))+(((0.1415)*x1083))+((cj1*x1084))+(((0.043)*sj1))+(((-1.0)*x1079*x1089))+pz+((x1080*x1087))+((x1080*x1088))+(((-1.0)*cj1*x1085))+((sj1*x1086))+(((-0.174)*cj1)));
evalcond[4]=(((x1079*x1087))+((x1079*x1088))+(((0.1415)*x1087))+(((0.174)*sj1))+((cj1*x1086))+(((0.043)*cj1))+(((-1.0)*x1081))+(((-1.0)*x1080*x1083))+(((-0.0099)*x1083))+((x1080*x1089))+(((-1.0)*x1078))+((sj1*x1085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x1090=((0.0087238)+(((0.004128)*cj3))+(((-0.016704)*sj3)));
IkReal x1091=((0.0500934)+(((0.016704)*cj3))+(((0.004128)*sj3)));
CheckValue<IkReal> x1094 = IKatan2WithCheck(IkReal(x1091),IkReal(x1090),IKFAST_ATAN2_MAGTHRESH);
if(!x1094.valid){
continue;
}
IkReal x1092=((1.0)*(x1094.value));
if((((x1090*x1090)+(x1091*x1091))) < -0.00001)
continue;
CheckValue<IkReal> x1095=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1090*x1090)+(x1091*x1091)))),-1);
if(!x1095.valid){
continue;
}
if( (((x1095.value)*(((0.05454926)+(((-1.0)*(px*px)))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)))))) < -1-IKFAST_SINCOS_THRESH || (((x1095.value)*(((0.05454926)+(((-1.0)*(px*px)))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1093=IKasin(((x1095.value)*(((0.05454926)+(((-1.0)*(px*px)))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0009504)*sj3))))));
j2array[0]=((((-1.0)*x1092))+(((-1.0)*x1093)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+x1093+(((-1.0)*x1092)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
IkReal x1096=py*py;
IkReal x1097=cj0*cj0;
IkReal x1098=((((-1.0)*x1096))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*x1097*(px*px)))+((x1096*x1097)));
j1eval[0]=x1098;
j1eval[1]=IKsign(x1098);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1099=((4.84848484848485)*cj3);
IkReal x1100=(cj2*pz);
IkReal x1101=((4.84848484848485)*sj3);
IkReal x1102=((0.048)*cj3);
IkReal x1103=(pz*sj2);
IkReal x1104=((0.048)*sj3);
IkReal x1105=(py*sj0);
IkReal x1106=(cj0*px);
IkReal x1107=(sj2*x1105);
IkReal x1108=(sj3*x1103);
IkReal x1109=(cj2*x1105);
IkReal x1110=(cj2*x1106);
j1eval[0]=((((-1.0)*sj2*x1099*x1106))+(((-14.2929292929293)*x1107))+(((-14.2929292929293)*sj2*x1106))+(((-1.0)*x1109))+(((-1.0)*x1103))+(((-1.0)*x1110))+((x1099*x1100))+(((-1.0)*x1099*x1107))+(((14.2929292929293)*x1100))+(((17.5757575757576)*pz))+(((-4.34343434343434)*x1106))+(((-4.34343434343434)*x1105))+(((-1.0)*x1101*x1103))+(((-1.0)*x1101*x1109))+(((-1.0)*x1101*x1110)));
j1eval[1]=IKsign(((((-0.0099)*x1103))+(((-0.0099)*x1109))+(((-1.0)*x1103*x1104))+(((-0.0099)*x1110))+(((0.174)*pz))+(((-0.1415)*sj2*x1106))+(((-1.0)*sj2*x1102*x1106))+(((0.1415)*x1100))+(((-0.1415)*x1107))+(((-0.043)*x1105))+(((-0.043)*x1106))+(((-1.0)*x1104*x1109))+((x1100*x1102))+(((-1.0)*x1104*x1110))+(((-1.0)*x1102*x1107))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1111=((4.84848484848485)*sj2);
IkReal x1112=(py*sj0);
IkReal x1113=(cj3*pz);
IkReal x1114=((14.2929292929293)*cj2);
IkReal x1115=((4.84848484848485)*cj3);
IkReal x1116=(cj0*px);
IkReal x1117=(pz*sj2);
IkReal x1118=(cj2*pz);
IkReal x1119=((0.048)*sj3);
IkReal x1120=((0.0099)*sj2);
IkReal x1121=((0.048)*cj3);
IkReal x1122=(cj2*x1116);
j1eval[0]=(((sj2*x1112))+((sj2*x1116))+(((-14.2929292929293)*x1117))+(((-1.0)*x1114*x1116))+(((-4.84848484848485)*sj3*x1118))+(((-17.5757575757576)*x1116))+(((-17.5757575757576)*x1112))+(((-4.34343434343434)*pz))+(((-1.0)*x1118))+(((-1.0)*x1112*x1114))+((sj3*x1111*x1116))+((sj3*x1111*x1112))+(((-1.0)*x1111*x1113))+(((-1.0)*x1115*x1122))+(((-1.0)*cj2*x1112*x1115)));
j1eval[1]=IKsign(((((-0.0099)*x1118))+(((-0.1415)*x1122))+(((-1.0)*cj2*x1112*x1121))+(((-1.0)*x1121*x1122))+((sj2*x1112*x1119))+((sj2*x1116*x1119))+(((-0.048)*sj2*x1113))+(((-0.1415)*cj2*x1112))+((x1112*x1120))+(((-0.1415)*x1117))+(((-0.043)*pz))+(((-1.0)*x1118*x1119))+((x1116*x1120))+(((-0.174)*x1112))+(((-0.174)*x1116))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1123=cj2*cj2;
IkReal x1124=cj3*cj3;
IkReal x1125=((0.0009504)*cj3);
IkReal x1126=(cj2*sj2);
IkReal x1127=((0.0009504)*sj3);
IkReal x1128=(cj2*cj3);
IkReal x1129=(py*sj0);
IkReal x1130=((0.0099)*sj2);
IkReal x1131=((0.1415)*cj2);
IkReal x1132=(cj0*px);
IkReal x1133=(sj2*sj3);
IkReal x1134=(pz*sj2);
IkReal x1135=((0.013584)*sj3);
IkReal x1136=((0.013584)*cj3);
IkReal x1137=(cj3*sj3);
IkReal x1138=(cj2*sj3);
IkReal x1139=((1.0)*pz);
IkReal x1140=((0.004608)*x1124);
CheckValue<IkReal> x1141 = IKatan2WithCheck(IkReal(((-0.03267801)+(((-0.049242)*cj2))+((x1126*x1135))+(((0.002304)*x1124))+(((-1.0)*x1123*x1140))+(((-0.01762024)*x1123))+(((0.0028017)*x1126))+((x1125*x1126))+(((-1.0)*x1123*x1136))+(pz*pz)+(((0.004608)*x1126*x1137))+(((-1.0)*x1127))+((x1123*x1127))+(((0.0034452)*sj2))+(((-0.016704)*x1128))+(((0.016704)*x1133)))),IkReal(((-0.00608115)+(((0.002304)*x1137))+(((-0.01762024)*x1126))+(((-0.008352)*cj3*sj2))+(((-0.002064)*x1128))+(((-0.0028017)*x1123))+(((-0.0078071)*cj2))+(((-1.0)*x1123*x1125))+(((-1.0)*x1126*x1136))+(((-1.0)*x1123*x1135))+(((-0.0241953)*sj2))+(((-0.004608)*x1123*x1137))+(((-1.0)*x1132*x1139))+(((-0.008352)*x1138))+(((-1.0)*x1126*x1140))+(((0.006792)*sj3))+(((0.0004752)*cj3))+(((0.002064)*x1133))+(((-1.0)*x1129*x1139))+((x1126*x1127)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1141.valid){
continue;
}
CheckValue<IkReal> x1142=IKPowWithIntegerCheck(IKsign((((x1130*x1132))+((x1129*x1130))+(((-0.048)*pz*x1138))+(((-1.0)*x1131*x1132))+(((0.048)*x1132*x1133))+(((-0.048)*x1128*x1129))+(((-0.048)*cj3*x1134))+(((-0.048)*x1128*x1132))+(((-0.043)*pz))+(((-0.0099)*cj2*pz))+(((-0.174)*x1129))+(((0.048)*x1129*x1133))+(((-0.174)*x1132))+(((-1.0)*x1129*x1131))+(((-0.1415)*x1134)))),-1);
if(!x1142.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1141.value)+(((1.5707963267949)*(x1142.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1143=IKsin(j1);
IkReal x1144=IKcos(j1);
IkReal x1145=((0.048)*sj3);
IkReal x1146=(cj0*px);
IkReal x1147=((0.1415)*sj2);
IkReal x1148=(py*sj0);
IkReal x1149=((0.1415)*cj2);
IkReal x1150=((0.0099)*cj2);
IkReal x1151=((0.048)*cj3);
IkReal x1152=((0.348)*x1143);
IkReal x1153=(sj2*x1143);
IkReal x1154=(sj2*x1151);
IkReal x1155=((1.0)*x1144);
IkReal x1156=((0.086)*x1144);
IkReal x1157=(cj2*x1143);
IkReal x1158=(sj2*x1144);
IkReal x1159=(pz*x1144);
IkReal x1160=(pz*x1143);
IkReal x1161=(cj2*x1144);
evalcond[0]=((-0.174)+x1159+((x1143*x1146))+((x1143*x1148))+(((0.0099)*sj2))+(((-1.0)*x1149))+((sj2*x1145))+(((-1.0)*cj2*x1151)));
evalcond[1]=((0.043)+x1147+x1154+x1150+x1160+((cj2*x1145))+(((-1.0)*x1146*x1155))+(((-1.0)*x1148*x1155)));
evalcond[2]=((-0.00970074)+(((-1.0)*(px*px)))+((x1146*x1152))+((x1146*x1156))+(((0.013584)*cj3))+(((-0.086)*x1160))+(((0.348)*x1159))+(((-1.0)*(pz*pz)))+((x1148*x1156))+((x1148*x1152))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)));
evalcond[3]=(((x1143*x1147))+(((0.043)*x1143))+((x1143*x1150))+(((-0.174)*x1144))+(((-1.0)*x1151*x1161))+pz+((x1151*x1153))+(((0.0099)*x1158))+(((-1.0)*x1144*x1149))+((x1145*x1158))+((x1145*x1157)));
evalcond[4]=(((x1143*x1149))+(((0.043)*x1144))+(((0.174)*x1143))+(((-1.0)*x1148))+(((-1.0)*x1146))+((x1145*x1161))+(((-0.0099)*x1153))+((x1151*x1157))+((x1144*x1147))+(((-1.0)*x1145*x1153))+((x1144*x1154))+((x1144*x1150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1162=cj2*cj2;
IkReal x1163=cj3*cj3;
IkReal x1164=(pz*sj2);
IkReal x1165=((0.048)*sj3);
IkReal x1166=(cj2*sj3);
IkReal x1167=(py*sj0);
IkReal x1168=((0.1415)*sj2);
IkReal x1169=((0.0009504)*cj3);
IkReal x1170=(cj0*px);
IkReal x1171=((0.0099)*cj2);
IkReal x1172=(cj2*sj2);
IkReal x1173=((0.013584)*cj3);
IkReal x1174=(cj3*sj3);
IkReal x1175=(cj3*sj2);
IkReal x1176=(cj2*pz);
IkReal x1177=((0.004608)*x1163);
IkReal x1178=(sj3*x1162);
CheckValue<IkReal> x1179 = IKatan2WithCheck(IkReal(((-0.00608115)+(((-0.002064)*cj2*cj3))+(((-0.0028017)*x1162))+(((-0.013584)*x1178))+(((-0.01762024)*x1172))+(((-1.0)*x1162*x1169))+(((0.0009504)*sj2*x1166))+(((-0.004608)*x1162*x1174))+(((-1.0)*x1172*x1177))+(((-1.0)*x1172*x1173))+(((0.002064)*sj2*sj3))+(((-0.0078071)*cj2))+(((-0.0241953)*sj2))+(((-0.008352)*x1175))+(((-0.008352)*x1166))+((pz*x1167))+((pz*x1170))+(((0.006792)*sj3))+(((0.0004752)*cj3))+(((0.002304)*x1174)))),IkReal(((-0.02187125)+(((-0.0009504)*x1178))+(((-0.013584)*sj2*x1166))+(((0.01762024)*x1162))+(((-0.0028017)*x1172))+((x1162*x1177))+((x1162*x1173))+(((-0.002304)*x1163))+(pz*pz)+(((-0.004608)*x1166*x1175))+(((-1.0)*x1169*x1172))+(((-1.0)*x1173))+(((-0.004128)*x1166))+(((-0.0008514)*cj2))+(((-0.012169)*sj2))+(((-0.004128)*x1175)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1179.valid){
continue;
}
CheckValue<IkReal> x1180=IKPowWithIntegerCheck(IKsign(((((0.174)*pz))+(((0.1415)*x1176))+(((-0.043)*x1170))+(((-0.043)*x1167))+(((-1.0)*x1168*x1170))+(((-0.0099)*x1164))+(((0.048)*cj3*x1176))+(((-1.0)*cj2*x1165*x1167))+(((-1.0)*cj2*x1165*x1170))+(((-0.048)*x1170*x1175))+(((-1.0)*x1167*x1171))+(((-1.0)*x1167*x1168))+(((-1.0)*x1170*x1171))+(((-0.048)*x1167*x1175))+(((-1.0)*x1164*x1165)))),-1);
if(!x1180.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1179.value)+(((1.5707963267949)*(x1180.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1181=IKsin(j1);
IkReal x1182=IKcos(j1);
IkReal x1183=((0.048)*sj3);
IkReal x1184=(cj0*px);
IkReal x1185=((0.1415)*sj2);
IkReal x1186=(py*sj0);
IkReal x1187=((0.1415)*cj2);
IkReal x1188=((0.0099)*cj2);
IkReal x1189=((0.048)*cj3);
IkReal x1190=((0.348)*x1181);
IkReal x1191=(sj2*x1181);
IkReal x1192=(sj2*x1189);
IkReal x1193=((1.0)*x1182);
IkReal x1194=((0.086)*x1182);
IkReal x1195=(cj2*x1181);
IkReal x1196=(sj2*x1182);
IkReal x1197=(pz*x1182);
IkReal x1198=(pz*x1181);
IkReal x1199=(cj2*x1182);
evalcond[0]=((-0.174)+x1197+(((0.0099)*sj2))+(((-1.0)*x1187))+(((-1.0)*cj2*x1189))+((sj2*x1183))+((x1181*x1184))+((x1181*x1186)));
evalcond[1]=((0.043)+x1188+x1185+x1198+x1192+(((-1.0)*x1186*x1193))+(((-1.0)*x1184*x1193))+((cj2*x1183)));
evalcond[2]=((-0.00970074)+((x1184*x1194))+((x1184*x1190))+(((-1.0)*(px*px)))+((x1186*x1194))+((x1186*x1190))+(((0.348)*x1197))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+(((-0.086)*x1198))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)));
evalcond[3]=((((-1.0)*x1189*x1199))+((x1183*x1195))+((x1183*x1196))+((x1189*x1191))+(((0.0099)*x1196))+pz+((x1181*x1188))+((x1181*x1185))+(((-0.174)*x1182))+(((-1.0)*x1182*x1187))+(((0.043)*x1181)));
evalcond[4]=(((x1182*x1185))+((x1182*x1188))+((x1182*x1192))+((x1183*x1199))+((x1189*x1195))+((x1181*x1187))+(((-1.0)*x1183*x1191))+(((0.043)*x1182))+(((-0.0099)*x1191))+(((-1.0)*x1186))+(((-1.0)*x1184))+(((0.174)*x1181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1200=py*py;
IkReal x1201=cj0*cj0;
IkReal x1202=(pz*sj2);
IkReal x1203=((0.048)*sj3);
IkReal x1204=(py*sj0);
IkReal x1205=((0.1415)*sj2);
IkReal x1206=(cj2*pz);
IkReal x1207=((0.048)*cj3);
IkReal x1208=(cj0*px);
IkReal x1209=((0.0099)*sj2);
IkReal x1210=(cj2*x1208);
CheckValue<IkReal> x1211=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1204*x1208))+(((-1.0)*x1201*(px*px)))+((x1200*x1201))+(((-1.0)*x1200))+(((-1.0)*(pz*pz))))),-1);
if(!x1211.valid){
continue;
}
CheckValue<IkReal> x1212 = IKatan2WithCheck(IkReal((((x1204*x1209))+((sj2*x1203*x1204))+((sj2*x1203*x1208))+(((-1.0)*x1207*x1210))+(((-0.174)*x1208))+(((-0.174)*x1204))+(((0.0099)*x1206))+((x1202*x1207))+(((-0.1415)*x1210))+((x1208*x1209))+((x1203*x1206))+(((-1.0)*cj2*x1204*x1207))+(((0.1415)*x1202))+(((0.043)*pz))+(((-0.1415)*cj2*x1204)))),IkReal(((((-0.0099)*cj2*x1204))+(((-1.0)*x1204*x1205))+(((-0.0099)*x1210))+(((-1.0)*x1203*x1210))+(((0.0099)*x1202))+((x1202*x1203))+(((-1.0)*cj2*x1203*x1204))+(((-1.0)*x1205*x1208))+(((-1.0)*sj2*x1207*x1208))+(((-1.0)*sj2*x1204*x1207))+(((-0.174)*pz))+(((-0.043)*x1204))+(((-0.043)*x1208))+(((-1.0)*x1206*x1207))+(((-0.1415)*x1206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1212.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1211.value)))+(x1212.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1213=IKsin(j1);
IkReal x1214=IKcos(j1);
IkReal x1215=((0.048)*sj3);
IkReal x1216=(cj0*px);
IkReal x1217=((0.1415)*sj2);
IkReal x1218=(py*sj0);
IkReal x1219=((0.1415)*cj2);
IkReal x1220=((0.0099)*cj2);
IkReal x1221=((0.048)*cj3);
IkReal x1222=((0.348)*x1213);
IkReal x1223=(sj2*x1213);
IkReal x1224=(sj2*x1221);
IkReal x1225=((1.0)*x1214);
IkReal x1226=((0.086)*x1214);
IkReal x1227=(cj2*x1213);
IkReal x1228=(sj2*x1214);
IkReal x1229=(pz*x1214);
IkReal x1230=(pz*x1213);
IkReal x1231=(cj2*x1214);
evalcond[0]=((-0.174)+x1229+((x1213*x1218))+((x1213*x1216))+(((0.0099)*sj2))+((sj2*x1215))+(((-1.0)*x1219))+(((-1.0)*cj2*x1221)));
evalcond[1]=((0.043)+x1230+x1224+x1220+x1217+(((-1.0)*x1218*x1225))+(((-1.0)*x1216*x1225))+((cj2*x1215)));
evalcond[2]=((-0.00970074)+(((-1.0)*(px*px)))+(((-0.086)*x1230))+((x1216*x1222))+((x1216*x1226))+(((0.348)*x1229))+(((0.013584)*cj3))+(((-1.0)*(pz*pz)))+((x1218*x1226))+((x1218*x1222))+(((-1.0)*(py*py)))+(((0.0009504)*sj3)));
evalcond[3]=(((x1213*x1217))+(((-1.0)*x1214*x1219))+(((-1.0)*x1221*x1231))+(((-0.174)*x1214))+pz+((x1221*x1223))+(((0.043)*x1213))+((x1213*x1220))+((x1215*x1227))+((x1215*x1228))+(((0.0099)*x1228)));
evalcond[4]=(((x1214*x1217))+((x1214*x1220))+((x1214*x1224))+((x1213*x1219))+(((-0.0099)*x1223))+(((-1.0)*x1215*x1223))+((x1221*x1227))+(((0.043)*x1214))+(((0.174)*x1213))+((x1215*x1231))+(((-1.0)*x1216))+(((-1.0)*x1218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "125c4a611925c5d60050a75d48d5d5c7"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
