<!-- -->
<launch>
  <arg name="debug" default="false" />

  <!-- send table.xml to param server -->
  <arg name="use_gnss" default="0" />
  <arg name="use_imu" default="false" />
  <arg name="use_odom" default="false" />
  <arg name="imu_upside_down" default="true" />
  <arg name="queue_size" default="10" />
  <arg name="offset" default="linear" />
  <arg name="use_openmp" default="false" />
  <arg name="get_height" default="false" />
  <arg name="use_local_transform" default="false" />
  <arg name="sync" default="false" />
  <arg name="imu_topic" default="/xsens_imu_odom/imu/data" />

  <arg name="use_voxel_grid_filter" default="false" />

  <rosparam>
    localizer: velodyne
    tf_x: -0.232
    tf_y: 0
    tf_z: 1.329
    tf_roll: 0
    tf_pitch: 0
    tf_yaw: 0
  </rosparam>
  <group if="$(arg debug)">
    <param name="use_sim_time" value="true" />
    <!-- Static transtorm -->
    <param name="robot_description"
      textfile="$(find autolabor_description)/urdf/autolabor.urdf" />
    <node name="robot_state_publisher" pkg="robot_state_publisher"
      type="robot_state_publisher" />

    <node pkg="rosbag" type="play" name="rosbag_play_node"
        args="$(env HOME)/bags/autolabor_bag/0315taf_4.bag --clock" >
    </node>

    <node pkg="hector_trajectory_server" type="hector_trajectory_server" name="trajectory_node">
      <remap from="trajectory" to="autolabor_odom" />
      <param name="target_frame_name" type="string" value="/map" />
      <param name="source_frame_name" type="string" value="/base_link" />
      <param name="trajectory_update_rate" value="10" />
      <param name="trajectory_publish_rate" value="10" />
    </node>

    <node pkg="pcl_ros" type="pcd_to_pointcloud" name="pcd_map_publish" output="screen"
          args="$(env HOME)/pcd/0315taf_2_50cm.pcd 1">
      <param name="frame_id" value="map" />
      <remap from="cloud_pcd" to="points_map" />
    </node>

    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find ndt_localizer)/rviz/ndt_matching.rviz" />
  </group>

  <node pkg="ndt_localizer" type="ndt_matching" name="ndt_matching" >
    <param name="use_gnss" value="$(arg use_gnss)" />
    <param name="use_imu" value="$(arg use_imu)" />
    <param name="use_odom" value="$(arg use_odom)" />
    <param name="imu_upside_down" value="$(arg imu_upside_down)" />
    <param name="queue_size" value="$(arg queue_size)" />
    <param name="offset" value="$(arg offset)" />
    <param name="use_openmp" value="$(arg use_openmp)" />
    <param name="get_height" value="$(arg get_height)" />
    <param name="use_local_transform" value="$(arg use_local_transform)" />
    <param name="imu_topic" value="$(arg imu_topic)" />
    <remap from="/points_raw" to="/sync_drivers/points_raw" if="$(arg sync)" />
    <remap from="odom_pose" to="odom" />
    <!-- <remap from="/filtered_points" to="velodyne_points" unless="$(arg sync)" /> -->
  </node>

  <!-- odom publish -->
  <include if="$(arg use_odom)" file="$(find autolabor_odom)/launch/odom_publish.launch">
    <arg name="debug" value="false"/>
    <!-- <arg name="use_wheel" value="true"/> -->
    <arg name="pub_tf" value="false"/>
  </include>

  <!-- odom publish -->
  <!-- <include file="$(find autolabor_odom)/launch/odom_publish.launch" /> -->

  <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />
  <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
    <remap from="~input"  to="velodyne_points" />
    <remap from="~output" to="filtered_points" />
    <rosparam>
      filter_field_name: z
      filter_limit_min: -10
      filter_limit_max: 10
      filter_limit_negative: False
      leaf_size: 0.25
    </rosparam>
  </node>

  <node pkg="rostopic" type="rostopic" name="ndt_confing"
    args="pub -r 1 /config/ndt autoware_msgs/ConfigNdt
    {'header: {
      seq: 0,
      stamp: {secs: 0, nsecs: 0},
      frame_id: 'config'},
    x: 0,
    y: 0,
    z: 0,
    roll: 0,
    pitch: 0,
    yaw: 0,
    use_predict_pose: false,
    error_threshold: 1,
    resolution: 1,
    step_size: 0.1,
    trans_epsilon: 0.01,
    max_iterations: 30
    '} "/>

</launch>
